//! \file
#ifndef Y_NWSRT_INCLUDED
#define Y_NWSRT_INCLUDED 1
#include "y/type/bswap.hpp"
//! swapping the pair I,J
#define Y_NWSRT_SWAP(I,J) { T &aI = a[I]; T &aJ = a[J]; if(aJ<aI) core::bswap< sizeof(T) >( &aI, &aJ ); }
//! swapping two pairs I,J
#define Y_NWSRT_SWP2(I,J) { const unsigned II = I; const unsigned JJ = J; T &aI = a[II]; T &aJ = a[JJ]; if(aJ<aI) { core::bswap< sizeof(T) >( &aI, &aJ ); core::bswap< sizeof(U) >( &b[II],&b[JJ]); } }
namespace upsylon {
	//! network sorting
	struct nwsrt {
		static const size_t max_size=32; //!< max handled case
		//!built-in version on 2 items
		template <typename T> static inline void on2(T *a) {
			assert(a);
			static const unsigned I[1] = {0};
			static const unsigned J[1] = {1};
			for(size_t k=0;k<1;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 3 items
		template <typename T> static inline void on3(T *a) {
			assert(a);
			static const unsigned I[3] = {1,0,0};
			static const unsigned J[3] = {2,2,1};
			for(size_t k=0;k<3;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 4 items
		template <typename T> static inline void on4(T *a) {
			assert(a);
			static const unsigned I[5] = {0,2,0,1,1};
			static const unsigned J[5] = {1,3,2,3,2};
			for(size_t k=0;k<5;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 5 items
		template <typename T> static inline void on5(T *a) {
			assert(a);
			static const unsigned I[9] = {0,3,2,2,1,0,0,1,1};
			static const unsigned J[9] = {1,4,4,3,4,3,2,3,2};
			for(size_t k=0;k<9;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 6 items
		template <typename T> static inline void on6(T *a) {
			assert(a);
			static const unsigned I[12] = {1,4,0,3,0,3,2,0,1,2,1,2};
			static const unsigned J[12] = {2,5,2,5,1,4,5,3,4,4,3,3};
			for(size_t k=0;k<12;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 7 items
		template <typename T> static inline void on7(T *a) {
			assert(a);
			static const unsigned I[16] = {1,3,5,0,3,4,0,4,2,0,1,0,2,1,2,2};
			static const unsigned J[16] = {2,4,6,2,5,6,1,5,6,4,5,3,5,3,4,3};
			for(size_t k=0;k<16;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 8 items
		template <typename T> static inline void on8(T *a) {
			assert(a);
			static const unsigned I[19] = {0,2,4,6,0,1,4,5,1,5,0,3,1,2,1,3,2,3,3};
			static const unsigned J[19] = {1,3,5,7,2,3,6,7,2,6,4,7,5,6,4,6,4,5,4};
			for(size_t k=0;k<19;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 9 items
		template <typename T> static inline void on9(T *a) {
			assert(a);
			static const unsigned I[25] = {2,0,1,7,0,1,3,4,5,1,2,6,0,4,3,3,5,1,1,6,4,2,5,2,4};
			static const unsigned J[25] = {6,5,4,8,7,2,5,6,8,3,7,8,1,5,7,4,6,2,3,7,5,4,6,3,5};
			for(size_t k=0;k<25;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 10 items
		template <typename T> static inline void on10(T *a) {
			assert(a);
			static const unsigned I[29] = {1,7,2,5,0,2,0,8,3,4,0,3,0,6,4,1,3,5,6,1,7,1,2,4,2,6,4,3,5};
			static const unsigned J[29] = {4,8,3,6,9,5,7,9,6,9,1,5,2,9,7,8,4,8,7,2,8,3,5,6,3,7,5,4,6};
			for(size_t k=0;k<29;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 11 items
		template <typename T> static inline void on11(T *a) {
			assert(a);
			static const unsigned I[35] = {0,2,4,6,8,1,5,0,4,8,1,5,9,0,3,1,6,4,5,2,0,3,1,6,2,8,1,7,3,6,2,7,5,3,7};
			static const unsigned J[35] = {1,3,5,7,9,3,7,2,6,10,2,6,10,4,7,5,10,8,9,6,4,8,5,10,3,9,4,10,5,8,4,9,6,4,8};
			for(size_t k=0;k<35;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 12 items
		template <typename T> static inline void on12(T *a) {
			assert(a);
			static const unsigned I[39] = {0,2,4,3,8,1,5,1,0,2,9,7,7,10,1,4,6,0,5,3,1,2,7,6,2,4,8,5,1,9,6,3,8,2,4,6,7,5,3};
			static const unsigned J[39] = {5,7,10,6,11,9,6,8,3,4,11,10,9,11,2,8,11,1,8,7,4,5,10,9,3,6,10,7,2,10,8,4,9,3,5,7,8,6,4};
			for(size_t k=0;k<39;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 13 items
		template <typename T> static inline void on13(T *a) {
			assert(a);
			static const unsigned I[45] = {4,0,3,2,6,1,0,2,5,7,1,10,9,0,8,3,8,11,7,4,2,5,4,10,0,3,1,6,3,1,9,6,5,1,2,9,6,2,5,7,3,8,6,4,5};
			static const unsigned J[45] = {8,9,7,5,11,12,6,4,8,12,3,11,11,1,12,6,10,12,9,6,8,9,7,11,2,5,8,9,4,2,11,10,7,3,4,10,8,3,6,8,5,9,7,5,6};
			for(size_t k=0;k<45;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 14 items
		template <typename T> static inline void on14(T *a) {
			assert(a);
			static const unsigned I[51] = {0,2,8,4,1,7,9,3,4,5,1,10,0,11,0,1,6,2,3,12,0,9,3,6,7,5,2,4,1,8,10,2,3,5,11,1,8,3,6,2,10,7,5,4,8,6,9,3,5,7,6};
			static const unsigned J[51] = {6,3,12,5,10,13,11,6,7,13,8,12,2,12,9,4,13,7,5,13,1,10,8,11,10,8,9,6,3,12,11,4,9,7,12,2,10,4,9,3,11,8,6,5,9,7,10,4,6,8,7};
			for(size_t k=0;k<51;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 15 items
		template <typename T> static inline void on15(T *a) {
			assert(a);
			static const unsigned I[56] = {12,5,3,2,4,6,1,11,1,7,0,4,2,8,0,9,1,5,7,11,3,0,5,9,8,2,6,3,2,12,10,1,8,4,6,13,1,3,10,4,7,12,2,10,5,4,9,6,7,11,3,9,5,7,8,6};
			static const unsigned J[56] = {13,7,11,10,9,8,14,14,3,10,12,6,5,9,2,14,4,6,8,13,12,1,11,10,12,4,13,7,3,14,13,5,11,9,7,14,2,5,12,8,9,13,3,11,6,5,11,8,10,12,4,10,6,8,9,7};
			for(size_t k=0;k<56;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 16 items
		template <typename T> static inline void on16(T *a) {
			assert(a);
			static const unsigned I[61] = {0,2,4,6,8,10,12,14,1,5,9,13,0,4,8,12,3,11,2,10,1,9,0,8,7,6,5,4,3,2,1,0,1,3,13,4,7,5,6,2,7,3,5,1,6,11,2,6,10,3,7,11,3,7,5,9,3,5,7,9,11};
			static const unsigned J[61] = {1,3,5,7,9,11,13,15,3,7,11,15,2,6,10,14,7,15,6,14,5,13,4,12,15,14,13,12,11,10,9,8,2,12,14,8,11,10,9,8,13,9,12,4,10,14,4,8,12,5,9,13,6,10,8,12,4,6,8,10,12};
			for(size_t k=0;k<61;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 17 items
		template <typename T> static inline void on17(T *a) {
			assert(a);
			static const unsigned I[71] = {5,4,7,0,2,1,3,6,3,8,4,9,0,14,1,10,3,11,0,12,2,7,1,13,5,6,0,15,5,6,2,9,12,8,4,7,11,1,8,4,6,10,1,2,9,6,14,1,3,13,11,2,3,10,13,3,10,7,3,12,5,8,11,4,6,9,5,6,9,8,7};
			static const unsigned J[71] = {11,9,12,14,16,15,8,13,10,13,7,12,2,16,6,15,5,13,4,16,9,14,3,15,10,11,1,16,7,8,3,11,13,10,6,9,13,2,14,5,12,14,8,5,12,7,15,4,10,15,14,4,8,12,14,6,11,8,4,13,6,9,12,5,8,11,7,7,10,9,8};
			for(size_t k=0;k<71;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 18 items
		template <typename T> static inline void on18(T *a) {
			assert(a);
			static const unsigned I[84] = {0,2,4,6,8,10,12,14,16,0,1,4,5,8,9,12,13,15,0,1,2,3,9,8,11,13,14,7,6,3,10,11,9,2,1,0,16,7,5,3,6,4,2,8,0,1,14,6,7,5,3,4,4,14,5,7,1,12,3,10,5,11,2,12,6,9,7,3,12,2,13,6,10,13,11,9,7,5,3,12,10,8,6,4};
			static const unsigned J[84] = {1,3,5,7,9,11,13,15,17,2,3,6,7,10,11,17,14,16,4,5,6,7,10,12,16,15,17,16,17,5,14,12,15,4,13,8,17,14,12,15,13,10,11,9,1,8,16,9,13,11,10,15,8,15,9,11,2,16,6,13,8,14,3,13,7,10,9,5,14,4,15,8,11,14,12,10,8,6,4,13,11,9,7,5};
			for(size_t k=0;k<84;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 19 items
		template <typename T> static inline void on19(T *a) {
			assert(a);
			static const unsigned I[86] = {4,3,0,7,8,6,15,1,9,2,11,7,6,10,3,13,0,14,1,5,3,17,4,9,13,1,12,2,7,5,0,16,6,2,11,12,0,1,8,4,15,11,10,3,1,5,6,8,14,1,5,10,2,7,9,8,16,14,2,9,4,7,15,2,13,5,6,12,3,10,4,6,14,4,7,11,9,13,6,10,8,12,5,7,9,11};
			static const unsigned J[86] = {10,12,16,14,11,13,17,5,18,5,16,9,15,12,4,17,8,18,2,16,7,18,15,10,14,6,16,11,13,10,1,18,8,9,15,17,3,7,14,6,16,12,14,4,2,7,13,9,17,3,6,15,4,13,12,11,17,15,5,10,6,11,16,3,14,8,11,14,5,13,8,9,15,5,8,12,10,14,7,11,9,13,6,8,10,12};
			for(size_t k=0;k<86;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 20 items
		template <typename T> static inline void on20(T *a) {
			assert(a);
			static const unsigned I[102] = {0,2,4,6,8,10,12,14,16,18,1,5,9,13,17,0,4,8,12,16,3,9,15,2,14,1,13,0,12,7,6,5,4,3,2,1,0,2,3,11,17,1,5,9,10,6,0,1,2,7,16,3,8,5,10,12,1,4,9,13,17,0,7,8,6,0,3,7,14,18,2,5,11,15,8,2,4,9,12,16,1,5,7,13,1,4,7,10,12,14,16,18,0,6,1,3,5,7,9,11,13,15};
			static const unsigned J[102] = {1,3,5,7,9,11,13,15,17,19,3,7,11,15,19,2,6,10,14,18,7,10,19,6,18,5,17,4,16,19,18,17,16,15,14,13,12,19,8,16,18,4,15,14,13,12,19,18,6,15,17,4,14,9,11,13,3,5,12,16,18,15,14,11,10,1,6,13,17,19,4,10,12,16,9,3,8,11,15,18,17,6,10,14,3,5,9,11,13,15,17,19,2,8,2,4,6,8,10,12,14,16};
			for(size_t k=0;k<102;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 21 items
		template <typename T> static inline void on21(T *a) {
			assert(a);
			static const unsigned I[102] = {5,11,1,2,6,0,3,4,12,7,1,13,2,9,4,8,3,15,0,10,0,2,17,1,16,7,12,14,0,9,4,5,16,19,0,14,10,5,6,1,4,18,8,7,17,1,6,3,5,13,11,9,8,18,4,13,2,10,12,3,6,1,15,11,14,8,3,4,15,11,17,2,15,10,4,16,13,9,3,5,15,8,11,6,4,12,8,6,14,12,7,10,5,13,7,11,6,9,7,9,9,9};
			static const unsigned J[102] = {9,15,19,14,18,17,20,8,16,13,7,19,11,18,12,16,5,17,10,20,6,3,18,4,19,8,13,20,1,10,11,6,17,20,2,15,11,12,13,3,9,20,15,14,19,2,10,12,7,15,18,14,16,19,5,17,7,14,16,8,9,4,19,17,16,12,6,5,18,13,18,4,16,11,5,17,15,11,4,7,16,9,12,7,5,14,10,8,15,13,9,11,6,14,10,12,8,13,8,12,11,10};
			for(size_t k=0;k<102;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 22 items
		template <typename T> static inline void on22(T *a) {
			assert(a);
			static const unsigned I[108] = {10,2,13,3,6,1,5,0,4,7,12,0,17,3,9,1,19,7,8,5,15,5,14,1,11,0,18,6,13,2,17,0,16,9,10,2,14,6,8,0,20,3,12,4,10,8,5,11,3,15,1,19,9,4,7,1,18,2,15,12,4,13,7,1,16,11,3,4,14,9,8,2,16,6,11,7,12,2,18,4,16,10,8,17,3,5,15,7,13,9,11,4,16,6,12,8,10,14,5,8,12,10,14,6,11,9,7,13};
			static const unsigned J[108] = {11,8,19,15,18,16,20,17,21,9,14,4,21,12,18,2,20,13,14,6,16,7,16,10,20,3,21,8,15,4,19,5,21,11,12,7,19,13,15,1,21,9,18,11,17,13,10,16,6,18,2,20,12,14,17,3,20,6,19,17,9,14,8,5,20,18,10,7,17,12,13,5,19,10,15,9,14,3,19,5,17,13,11,18,4,6,16,8,14,10,12,5,17,9,15,11,13,16,7,9,13,11,15,7,12,10,8,14};
			for(size_t k=0;k<108;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 23 items
		template <typename T> static inline void on23(T *a) {
			assert(a);
			static const unsigned I[118] = {1,2,5,9,0,15,4,6,10,8,14,3,4,11,2,16,0,13,5,7,1,12,8,17,0,20,1,3,12,9,6,7,18,21,0,8,17,2,9,10,19,0,11,6,15,20,1,5,4,14,3,13,10,4,16,8,7,4,18,9,11,16,12,1,19,2,13,8,5,15,11,1,4,19,5,14,6,13,12,2,18,17,6,14,8,2,3,18,16,7,13,3,5,17,7,9,4,15,10,6,9,5,14,10,8,15,6,11,9,13,7,14,8,12,11,12,10,11};
			static const unsigned J[118] = {20,21,13,17,7,22,11,12,16,18,19,8,14,18,6,20,9,22,15,17,10,21,19,22,5,21,2,4,13,10,15,16,19,22,1,11,20,5,12,13,22,3,14,8,18,21,2,17,11,16,9,19,11,7,18,14,15,6,21,10,13,20,14,4,21,6,18,12,7,17,16,3,9,20,8,17,10,16,15,3,20,19,9,15,12,4,5,19,17,9,15,4,6,18,8,10,5,17,14,11,12,7,16,11,9,16,7,13,10,14,8,15,9,14,12,13,11,12};
			for(size_t k=0;k<118;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 24 items
		template <typename T> static inline void on24(T *a) {
			assert(a);
			static const unsigned I[123] = {0,2,4,6,8,10,12,14,16,18,20,22,1,5,9,0,4,8,13,17,21,12,16,20,1,5,9,13,17,21,0,7,12,19,1,6,13,18,3,4,15,16,5,2,17,14,0,7,12,19,3,15,1,6,13,18,2,8,14,20,0,11,1,7,13,19,3,6,15,18,2,7,14,19,5,17,1,10,3,7,15,19,2,5,6,9,3,4,7,8,2,11,6,9,3,10,4,7,8,11,1,21,5,10,8,11,3,19,9,10,6,15,10,14,7,11,5,17,7,9,11,13,15};
			static const unsigned J[123] = {1,3,5,7,9,11,13,15,17,19,21,23,3,7,11,2,6,10,15,19,23,14,18,22,2,6,10,14,18,22,4,11,16,23,5,10,17,22,7,8,19,20,9,6,21,18,4,11,16,23,8,20,5,10,17,22,3,9,15,21,12,23,4,10,16,22,5,8,17,20,4,9,16,21,6,18,13,22,4,8,16,20,14,17,18,21,15,16,19,20,12,21,14,17,13,20,12,15,16,19,2,22,13,18,12,15,4,20,13,14,8,17,12,16,9,13,6,18,8,10,12,14,16};
			for(size_t k=0;k<123;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 25 items
		template <typename T> static inline void on25(T *a) {
			assert(a);
			static const unsigned I[154] = {1,4,7,10,13,16,19,21,23,0,3,6,9,12,15,18,21,22,0,3,2,6,9,8,12,15,14,18,22,20,0,1,6,7,5,12,13,18,19,17,2,1,8,7,0,14,13,18,20,11,2,8,1,4,14,19,20,16,2,1,3,5,20,12,15,17,2,4,12,13,14,16,10,2,5,4,14,13,17,11,3,5,14,16,17,0,9,5,4,14,15,17,0,8,10,5,15,17,1,7,11,16,2,1,6,8,11,17,2,3,7,10,2,4,5,8,11,2,5,4,3,9,5,3,4,10,5,4,11,9,10,5,8,11,10,5,7,11,5,6,8,11,6,8,10,11,7,9,11,8,11,9,10,11};
			static const unsigned J[154] = {2,5,8,11,14,17,20,22,24,2,5,8,11,14,17,20,23,24,1,4,5,7,10,11,13,16,17,19,23,24,3,4,9,10,11,15,16,22,23,24,4,3,10,9,6,16,15,21,23,24,3,9,7,10,15,21,22,23,8,6,9,10,21,19,22,23,7,9,18,20,21,22,23,6,9,7,20,18,22,23,6,8,19,20,21,13,22,7,6,18,19,20,12,21,22,6,18,19,14,20,22,18,15,12,19,20,21,18,14,16,19,20,13,17,18,19,20,12,17,16,13,19,16,12,14,19,15,12,19,16,17,14,15,18,16,13,14,17,12,13,14,16,12,13,14,15,12,13,14,12,13,12,12,12};
			for(size_t k=0;k<154;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 26 items
		template <typename T> static inline void on26(T *a) {
			assert(a);
			static const unsigned I[163] = {1,4,7,9,11,14,17,20,22,24,0,3,6,9,10,13,16,19,22,23,0,3,2,6,10,8,13,16,15,19,23,21,0,1,6,7,5,13,14,19,20,18,2,1,6,8,15,14,19,21,12,2,7,8,4,15,20,21,17,8,0,3,5,21,13,16,18,0,1,2,4,13,14,15,17,11,2,1,5,15,14,18,0,12,2,4,5,15,17,18,1,10,2,3,5,15,16,18,1,9,12,3,5,16,18,2,8,10,4,17,2,3,7,11,5,18,2,4,8,12,11,5,4,3,6,10,12,5,4,7,12,5,4,8,5,9,5,10,8,9,5,11,7,10,12,6,8,10,11,7,12,11,10,8,12,11,12,9,10,12,11,12,12};
			static const unsigned J[163] = {2,5,8,10,12,15,18,21,23,25,2,5,8,11,12,15,18,21,24,25,1,4,5,7,11,12,14,17,18,20,24,25,3,4,10,11,12,16,17,23,24,25,4,3,9,11,17,16,22,24,25,3,9,10,11,16,22,23,24,9,7,10,11,22,20,23,24,6,8,9,10,19,21,22,23,24,8,6,10,21,19,23,13,24,7,8,9,20,21,22,14,23,6,7,8,19,20,21,13,22,23,6,7,19,20,15,21,22,6,19,14,16,20,22,6,19,13,17,20,22,21,18,16,13,19,20,21,17,14,19,20,16,13,19,15,19,14,19,15,16,13,19,14,17,19,13,14,16,18,13,18,16,14,13,17,15,16,13,13,15,13,14,13};
			for(size_t k=0;k<163;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 27 items
		template <typename T> static inline void on27(T *a) {
			assert(a);
			static const unsigned I[173] = {1,4,7,9,11,14,16,18,21,23,25,0,3,6,9,10,13,16,17,20,23,24,0,3,2,6,10,8,13,17,15,20,24,22,0,1,6,7,5,13,14,20,21,19,2,1,6,8,13,15,20,22,12,2,7,8,4,14,15,21,22,13,18,8,0,3,5,15,22,14,17,19,0,1,2,4,15,14,16,19,11,2,1,5,15,17,0,12,2,4,5,15,18,17,0,10,2,3,5,19,16,18,1,12,3,5,17,19,2,1,9,4,18,19,2,3,8,10,5,19,2,4,7,11,2,5,4,3,6,8,12,11,5,3,4,7,10,12,5,4,8,12,5,9,5,10,9,5,11,8,10,5,12,7,10,11,6,8,12,11,7,12,10,11,8,12,12,9,10,12,11,12,12};
			static const unsigned J[173] = {2,5,8,10,12,15,17,19,22,24,26,2,5,8,11,12,15,18,19,22,25,26,1,4,5,7,11,12,14,18,19,21,25,26,3,4,10,11,12,17,18,24,25,26,4,3,9,11,16,18,23,25,26,3,9,10,11,16,17,23,24,20,25,9,7,10,11,16,23,21,24,25,6,8,9,10,22,20,23,24,25,8,6,10,21,23,14,25,7,8,9,20,23,21,13,24,6,7,8,23,20,22,15,24,6,7,20,22,16,13,23,6,20,21,15,17,22,23,6,20,14,18,21,23,13,19,17,14,20,21,23,22,18,13,15,20,21,22,17,13,20,21,16,20,15,20,16,14,20,15,17,13,20,14,16,18,13,14,19,16,13,18,14,15,13,17,16,13,13,15,13,14,13};
			for(size_t k=0;k<173;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 28 items
		template <typename T> static inline void on28(T *a) {
			assert(a);
			static const unsigned I[179] = {1,3,5,8,10,12,15,17,19,22,24,26,0,3,4,7,10,11,14,17,18,21,24,25,0,4,2,7,11,9,14,18,16,21,25,23,0,1,7,8,6,14,15,21,22,20,0,2,7,9,14,16,21,23,13,1,2,8,9,0,5,15,16,22,23,14,19,2,9,1,4,6,16,23,15,18,20,0,2,1,3,6,16,15,17,20,12,2,4,16,18,1,11,13,2,5,4,16,19,18,1,13,6,3,5,20,17,19,2,4,6,18,20,2,3,10,5,6,19,20,2,4,9,11,6,20,4,5,3,8,12,6,5,4,7,9,13,12,6,4,5,8,11,13,6,5,9,13,6,10,6,11,10,6,12,9,11,6,13,8,11,12,7,9,13,12,8,13,11,12,9,13,13,10,11,13,12,13,13};
			static const unsigned J[179] = {2,4,6,9,11,13,16,18,20,23,25,27,2,5,6,9,12,13,16,19,20,23,26,27,1,5,6,8,12,13,15,19,20,22,26,27,4,5,11,12,13,18,19,25,26,27,3,5,10,12,17,19,24,26,27,3,4,10,11,7,12,17,18,24,25,21,26,3,10,8,11,12,17,24,22,25,26,14,9,7,10,11,23,21,24,25,26,8,10,22,24,15,25,26,7,10,8,21,24,22,14,25,10,7,9,24,21,23,16,7,9,21,23,15,17,24,7,8,21,22,14,18,23,24,7,21,17,19,14,22,24,20,17,15,21,22,24,23,19,14,16,21,22,23,18,14,21,22,17,21,16,21,17,15,21,16,18,14,21,15,17,19,14,15,20,17,14,19,15,16,14,18,17,14,14,16,14,15,14};
			for(size_t k=0;k<179;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 29 items
		template <typename T> static inline void on29(T *a) {
			assert(a);
			static const unsigned I[191] = {1,3,5,8,10,12,15,17,19,21,23,25,27,0,3,4,7,10,11,14,17,18,21,22,25,26,0,4,2,7,11,9,14,18,16,22,26,21,24,0,1,7,8,6,14,15,22,23,20,0,2,7,9,14,16,22,24,13,1,2,8,9,0,5,15,16,23,24,14,19,2,9,1,4,6,16,24,14,15,18,20,2,1,3,6,16,15,17,20,12,2,4,16,18,0,11,13,2,5,4,16,19,0,13,6,3,5,16,20,18,19,4,6,17,20,1,10,5,6,18,20,2,1,9,11,6,19,20,2,3,8,12,20,2,4,7,9,13,12,2,4,5,6,8,11,13,6,5,3,4,9,13,6,4,5,10,6,5,11,6,12,10,11,6,13,9,11,12,6,8,13,12,6,7,9,13,7,9,13,12,8,13,11,9,13,10,13,11,13,12,13};
			static const unsigned J[191] = {2,4,6,9,11,13,16,18,20,22,24,26,28,2,5,6,9,12,13,16,19,20,23,24,27,28,1,5,6,8,12,13,15,19,20,23,27,25,28,4,5,11,12,13,18,19,26,27,28,3,5,10,12,17,19,25,27,28,3,4,10,11,7,12,17,18,25,26,22,27,3,10,8,11,12,17,25,21,23,26,27,9,7,10,11,24,21,25,26,27,8,10,23,25,15,26,27,7,10,8,22,25,14,26,10,7,9,21,25,22,23,7,9,21,24,16,25,7,8,21,23,17,14,24,25,7,21,22,16,18,23,25,21,15,19,22,23,25,24,14,18,20,21,22,23,24,20,18,14,15,22,23,19,14,16,22,18,14,22,17,22,18,19,16,22,17,18,20,15,16,21,18,14,15,16,20,14,15,19,16,14,18,15,14,17,14,16,14,15,14,14};
			for(size_t k=0;k<191;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 30 items
		template <typename T> static inline void on30(T *a) {
			assert(a);
			static const unsigned I[198] = {1,3,5,7,9,11,13,16,18,20,22,24,26,28,0,3,4,7,8,11,12,15,18,19,22,23,26,27,0,4,2,8,12,7,10,15,19,17,23,27,22,25,0,1,8,9,6,15,16,23,24,21,0,2,8,10,15,17,23,25,14,1,2,9,10,0,5,16,17,24,25,15,20,2,10,0,1,4,6,17,25,15,16,19,21,2,1,3,6,17,16,18,21,0,13,2,4,17,19,1,12,14,2,5,17,20,1,14,2,6,4,5,17,21,19,20,3,6,18,21,2,11,4,6,19,21,2,3,10,12,5,6,20,21,2,4,9,13,6,21,4,5,3,8,10,14,6,5,4,7,10,13,14,6,4,5,8,12,14,6,5,9,14,6,10,6,11,10,6,12,9,11,6,13,8,10,12,14,7,10,12,13,8,14,13,12,9,14,13,10,14,11,14,12,14,13,14,14};
			static const unsigned J[198] = {2,4,6,8,10,12,14,17,19,21,23,25,27,29,2,5,6,9,10,13,14,17,20,21,24,25,28,29,1,5,6,9,13,11,14,16,20,21,24,28,26,29,4,5,12,13,14,19,20,27,28,29,3,5,11,13,18,20,26,28,29,3,4,11,12,8,13,18,19,26,27,23,28,3,11,7,9,12,13,18,26,22,24,27,28,10,7,11,12,25,22,26,27,15,28,9,11,24,26,16,27,28,8,11,23,26,15,27,7,11,8,9,22,26,23,24,7,10,22,25,17,26,7,9,22,24,16,18,25,26,7,8,22,23,15,19,24,26,7,22,18,20,15,23,24,26,21,18,16,22,23,24,25,20,15,17,22,23,24,19,15,22,23,18,22,17,22,18,16,22,17,19,15,22,16,17,20,22,15,16,19,21,15,21,19,16,15,20,17,15,19,15,18,15,17,15,16,15};
			for(size_t k=0;k<198;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 31 items
		template <typename T> static inline void on31(T *a) {
			assert(a);
			static const unsigned I[206] = {1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,0,3,4,7,8,11,12,15,16,19,20,23,24,27,28,0,4,2,8,12,7,10,16,20,15,18,24,28,23,26,0,1,8,9,6,16,17,24,25,15,22,0,2,8,10,16,18,24,26,14,1,2,9,10,0,5,17,18,25,26,16,21,2,10,0,1,4,6,18,26,16,17,20,22,2,1,3,6,18,17,19,22,0,13,2,4,18,20,0,1,12,14,2,5,18,21,1,14,2,6,4,5,18,22,20,21,3,6,19,22,2,11,4,6,20,22,2,3,10,12,5,6,21,22,2,4,9,13,6,22,2,4,5,8,10,14,6,5,3,4,7,10,13,14,6,4,5,8,12,14,6,5,9,14,6,10,6,11,6,12,10,11,6,13,9,12,6,14,8,10,12,13,7,10,14,13,8,14,12,13,9,14,10,14,11,14,12,14,13,14,14};
			static const unsigned J[206] = {2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,2,5,6,9,10,13,14,17,18,21,22,25,26,29,30,1,5,6,9,13,11,14,17,21,19,22,25,29,27,30,4,5,12,13,14,20,21,28,29,23,30,3,5,11,13,19,21,27,29,30,3,4,11,12,8,13,19,20,27,28,24,29,3,11,7,9,12,13,19,27,23,25,28,29,10,7,11,12,26,23,27,28,16,29,9,11,25,27,15,17,28,29,8,11,24,27,15,28,7,11,8,9,23,27,24,25,7,10,23,26,18,27,7,9,23,25,17,19,26,27,7,8,23,24,16,20,25,27,7,23,15,19,21,24,25,27,22,19,15,16,23,24,25,26,21,15,17,23,24,25,20,15,23,24,19,23,18,23,17,23,18,19,16,23,17,20,15,23,16,17,19,21,15,16,22,19,15,21,16,17,15,20,15,19,15,18,15,17,15,16,15};
			for(size_t k=0;k<206;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 32 items
		template <typename T> static inline void on32(T *a) {
			assert(a);
			static const unsigned I[211] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,1,4,5,8,9,12,13,16,17,20,21,24,25,28,29,1,5,0,3,9,13,8,11,17,21,16,19,25,29,24,27,1,2,9,10,0,7,17,18,25,26,16,23,1,3,9,11,17,19,25,27,0,15,2,3,10,11,1,6,18,19,26,27,17,22,3,11,1,2,5,7,19,27,17,18,21,23,3,2,4,7,19,18,20,23,1,14,3,5,19,21,1,2,13,15,3,6,19,22,2,15,3,7,5,6,19,23,21,22,4,7,20,23,3,12,5,7,21,23,3,4,11,13,6,7,22,23,3,5,10,14,7,23,3,5,6,9,11,15,7,6,4,5,8,11,14,15,7,5,6,9,13,15,7,6,10,15,7,11,7,12,7,13,11,12,7,14,10,13,7,15,9,11,13,14,8,11,15,14,9,15,13,14,10,15,11,15,12,15,13,15,14,15,15};
			static const unsigned J[211] = {1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,2,3,6,7,10,11,14,15,18,19,22,23,26,27,30,31,2,6,4,7,10,14,12,15,18,22,20,23,26,30,28,31,5,6,13,14,8,15,21,22,29,30,24,31,4,6,12,14,20,22,28,30,16,31,4,5,12,13,9,14,20,21,28,29,25,30,4,12,8,10,13,14,20,28,24,26,29,30,11,8,12,13,27,24,28,29,17,30,10,12,26,28,16,18,29,30,9,12,25,28,16,29,8,12,9,10,24,28,25,26,8,11,24,27,19,28,8,10,24,26,18,20,27,28,8,9,24,25,17,21,26,28,8,24,16,20,22,25,26,28,23,20,16,17,24,25,26,27,22,16,18,24,25,26,21,16,24,25,20,24,19,24,18,24,19,20,17,24,18,21,16,24,17,18,20,22,16,17,23,20,16,22,17,18,16,21,16,20,16,19,16,18,16,17,16};
			for(size_t k=0;k<211;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 0-32 items
		template <typename T> static inline void on(T *a, const size_t n) {
			switch(n) {
				case  2: on2(a);  break;
				case  3: on3(a);  break;
				case  4: on4(a);  break;
				case  5: on5(a);  break;
				case  6: on6(a);  break;
				case  7: on7(a);  break;
				case  8: on8(a);  break;
				case  9: on9(a);  break;
				case 10: on10(a); break;
				case 11: on11(a); break;
				case 12: on12(a); break;
				case 13: on13(a); break;
				case 14: on14(a); break;
				case 15: on15(a); break;
				case 16: on16(a); break;
				case 17: on17(a); break;
				case 18: on18(a); break;
				case 19: on19(a); break;
				case 20: on20(a); break;
				case 21: on21(a); break;
				case 22: on22(a); break;
				case 23: on23(a); break;
				case 24: on24(a); break;
				case 25: on25(a); break;
				case 26: on26(a); break;
				case 27: on27(a); break;
				case 28: on28(a); break;
				case 29: on29(a); break;
				case 30: on30(a); break;
				case 31: on31(a); break;
				case 32: on32(a); break;
				default: break;
			}
		}
		//!built-in version on 2 items
		template <typename T,typename U> static inline void on2(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[1] = {0};
			static const unsigned J[1] = {1};
			for(size_t k=0;k<1;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 3 items
		template <typename T,typename U> static inline void on3(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[3] = {1,0,0};
			static const unsigned J[3] = {2,2,1};
			for(size_t k=0;k<3;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 4 items
		template <typename T,typename U> static inline void on4(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[5] = {0,2,0,1,1};
			static const unsigned J[5] = {1,3,2,3,2};
			for(size_t k=0;k<5;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 5 items
		template <typename T,typename U> static inline void on5(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[9] = {0,3,2,2,1,0,0,1,1};
			static const unsigned J[9] = {1,4,4,3,4,3,2,3,2};
			for(size_t k=0;k<9;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 6 items
		template <typename T,typename U> static inline void on6(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[12] = {1,4,0,3,0,3,2,0,1,2,1,2};
			static const unsigned J[12] = {2,5,2,5,1,4,5,3,4,4,3,3};
			for(size_t k=0;k<12;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 7 items
		template <typename T,typename U> static inline void on7(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[16] = {1,3,5,0,3,4,0,4,2,0,1,0,2,1,2,2};
			static const unsigned J[16] = {2,4,6,2,5,6,1,5,6,4,5,3,5,3,4,3};
			for(size_t k=0;k<16;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 8 items
		template <typename T,typename U> static inline void on8(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[19] = {0,2,4,6,0,1,4,5,1,5,0,3,1,2,1,3,2,3,3};
			static const unsigned J[19] = {1,3,5,7,2,3,6,7,2,6,4,7,5,6,4,6,4,5,4};
			for(size_t k=0;k<19;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 9 items
		template <typename T,typename U> static inline void on9(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[25] = {2,0,1,7,0,1,3,4,5,1,2,6,0,4,3,3,5,1,1,6,4,2,5,2,4};
			static const unsigned J[25] = {6,5,4,8,7,2,5,6,8,3,7,8,1,5,7,4,6,2,3,7,5,4,6,3,5};
			for(size_t k=0;k<25;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 10 items
		template <typename T,typename U> static inline void on10(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[29] = {1,7,2,5,0,2,0,8,3,4,0,3,0,6,4,1,3,5,6,1,7,1,2,4,2,6,4,3,5};
			static const unsigned J[29] = {4,8,3,6,9,5,7,9,6,9,1,5,2,9,7,8,4,8,7,2,8,3,5,6,3,7,5,4,6};
			for(size_t k=0;k<29;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 11 items
		template <typename T,typename U> static inline void on11(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[35] = {0,2,4,6,8,1,5,0,4,8,1,5,9,0,3,1,6,4,5,2,0,3,1,6,2,8,1,7,3,6,2,7,5,3,7};
			static const unsigned J[35] = {1,3,5,7,9,3,7,2,6,10,2,6,10,4,7,5,10,8,9,6,4,8,5,10,3,9,4,10,5,8,4,9,6,4,8};
			for(size_t k=0;k<35;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 12 items
		template <typename T,typename U> static inline void on12(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[39] = {0,2,4,3,8,1,5,1,0,2,9,7,7,10,1,4,6,0,5,3,1,2,7,6,2,4,8,5,1,9,6,3,8,2,4,6,7,5,3};
			static const unsigned J[39] = {5,7,10,6,11,9,6,8,3,4,11,10,9,11,2,8,11,1,8,7,4,5,10,9,3,6,10,7,2,10,8,4,9,3,5,7,8,6,4};
			for(size_t k=0;k<39;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 13 items
		template <typename T,typename U> static inline void on13(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[45] = {4,0,3,2,6,1,0,2,5,7,1,10,9,0,8,3,8,11,7,4,2,5,4,10,0,3,1,6,3,1,9,6,5,1,2,9,6,2,5,7,3,8,6,4,5};
			static const unsigned J[45] = {8,9,7,5,11,12,6,4,8,12,3,11,11,1,12,6,10,12,9,6,8,9,7,11,2,5,8,9,4,2,11,10,7,3,4,10,8,3,6,8,5,9,7,5,6};
			for(size_t k=0;k<45;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 14 items
		template <typename T,typename U> static inline void on14(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[51] = {0,2,8,4,1,7,9,3,4,5,1,10,0,11,0,1,6,2,3,12,0,9,3,6,7,5,2,4,1,8,10,2,3,5,11,1,8,3,6,2,10,7,5,4,8,6,9,3,5,7,6};
			static const unsigned J[51] = {6,3,12,5,10,13,11,6,7,13,8,12,2,12,9,4,13,7,5,13,1,10,8,11,10,8,9,6,3,12,11,4,9,7,12,2,10,4,9,3,11,8,6,5,9,7,10,4,6,8,7};
			for(size_t k=0;k<51;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 15 items
		template <typename T,typename U> static inline void on15(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[56] = {12,5,3,2,4,6,1,11,1,7,0,4,2,8,0,9,1,5,7,11,3,0,5,9,8,2,6,3,2,12,10,1,8,4,6,13,1,3,10,4,7,12,2,10,5,4,9,6,7,11,3,9,5,7,8,6};
			static const unsigned J[56] = {13,7,11,10,9,8,14,14,3,10,12,6,5,9,2,14,4,6,8,13,12,1,11,10,12,4,13,7,3,14,13,5,11,9,7,14,2,5,12,8,9,13,3,11,6,5,11,8,10,12,4,10,6,8,9,7};
			for(size_t k=0;k<56;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 16 items
		template <typename T,typename U> static inline void on16(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[61] = {0,2,4,6,8,10,12,14,1,5,9,13,0,4,8,12,3,11,2,10,1,9,0,8,7,6,5,4,3,2,1,0,1,3,13,4,7,5,6,2,7,3,5,1,6,11,2,6,10,3,7,11,3,7,5,9,3,5,7,9,11};
			static const unsigned J[61] = {1,3,5,7,9,11,13,15,3,7,11,15,2,6,10,14,7,15,6,14,5,13,4,12,15,14,13,12,11,10,9,8,2,12,14,8,11,10,9,8,13,9,12,4,10,14,4,8,12,5,9,13,6,10,8,12,4,6,8,10,12};
			for(size_t k=0;k<61;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 17 items
		template <typename T,typename U> static inline void on17(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[71] = {5,4,7,0,2,1,3,6,3,8,4,9,0,14,1,10,3,11,0,12,2,7,1,13,5,6,0,15,5,6,2,9,12,8,4,7,11,1,8,4,6,10,1,2,9,6,14,1,3,13,11,2,3,10,13,3,10,7,3,12,5,8,11,4,6,9,5,6,9,8,7};
			static const unsigned J[71] = {11,9,12,14,16,15,8,13,10,13,7,12,2,16,6,15,5,13,4,16,9,14,3,15,10,11,1,16,7,8,3,11,13,10,6,9,13,2,14,5,12,14,8,5,12,7,15,4,10,15,14,4,8,12,14,6,11,8,4,13,6,9,12,5,8,11,7,7,10,9,8};
			for(size_t k=0;k<71;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 18 items
		template <typename T,typename U> static inline void on18(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[84] = {0,2,4,6,8,10,12,14,16,0,1,4,5,8,9,12,13,15,0,1,2,3,9,8,11,13,14,7,6,3,10,11,9,2,1,0,16,7,5,3,6,4,2,8,0,1,14,6,7,5,3,4,4,14,5,7,1,12,3,10,5,11,2,12,6,9,7,3,12,2,13,6,10,13,11,9,7,5,3,12,10,8,6,4};
			static const unsigned J[84] = {1,3,5,7,9,11,13,15,17,2,3,6,7,10,11,17,14,16,4,5,6,7,10,12,16,15,17,16,17,5,14,12,15,4,13,8,17,14,12,15,13,10,11,9,1,8,16,9,13,11,10,15,8,15,9,11,2,16,6,13,8,14,3,13,7,10,9,5,14,4,15,8,11,14,12,10,8,6,4,13,11,9,7,5};
			for(size_t k=0;k<84;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 19 items
		template <typename T,typename U> static inline void on19(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[86] = {4,3,0,7,8,6,15,1,9,2,11,7,6,10,3,13,0,14,1,5,3,17,4,9,13,1,12,2,7,5,0,16,6,2,11,12,0,1,8,4,15,11,10,3,1,5,6,8,14,1,5,10,2,7,9,8,16,14,2,9,4,7,15,2,13,5,6,12,3,10,4,6,14,4,7,11,9,13,6,10,8,12,5,7,9,11};
			static const unsigned J[86] = {10,12,16,14,11,13,17,5,18,5,16,9,15,12,4,17,8,18,2,16,7,18,15,10,14,6,16,11,13,10,1,18,8,9,15,17,3,7,14,6,16,12,14,4,2,7,13,9,17,3,6,15,4,13,12,11,17,15,5,10,6,11,16,3,14,8,11,14,5,13,8,9,15,5,8,12,10,14,7,11,9,13,6,8,10,12};
			for(size_t k=0;k<86;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 20 items
		template <typename T,typename U> static inline void on20(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[102] = {0,2,4,6,8,10,12,14,16,18,1,5,9,13,17,0,4,8,12,16,3,9,15,2,14,1,13,0,12,7,6,5,4,3,2,1,0,2,3,11,17,1,5,9,10,6,0,1,2,7,16,3,8,5,10,12,1,4,9,13,17,0,7,8,6,0,3,7,14,18,2,5,11,15,8,2,4,9,12,16,1,5,7,13,1,4,7,10,12,14,16,18,0,6,1,3,5,7,9,11,13,15};
			static const unsigned J[102] = {1,3,5,7,9,11,13,15,17,19,3,7,11,15,19,2,6,10,14,18,7,10,19,6,18,5,17,4,16,19,18,17,16,15,14,13,12,19,8,16,18,4,15,14,13,12,19,18,6,15,17,4,14,9,11,13,3,5,12,16,18,15,14,11,10,1,6,13,17,19,4,10,12,16,9,3,8,11,15,18,17,6,10,14,3,5,9,11,13,15,17,19,2,8,2,4,6,8,10,12,14,16};
			for(size_t k=0;k<102;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 21 items
		template <typename T,typename U> static inline void on21(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[102] = {5,11,1,2,6,0,3,4,12,7,1,13,2,9,4,8,3,15,0,10,0,2,17,1,16,7,12,14,0,9,4,5,16,19,0,14,10,5,6,1,4,18,8,7,17,1,6,3,5,13,11,9,8,18,4,13,2,10,12,3,6,1,15,11,14,8,3,4,15,11,17,2,15,10,4,16,13,9,3,5,15,8,11,6,4,12,8,6,14,12,7,10,5,13,7,11,6,9,7,9,9,9};
			static const unsigned J[102] = {9,15,19,14,18,17,20,8,16,13,7,19,11,18,12,16,5,17,10,20,6,3,18,4,19,8,13,20,1,10,11,6,17,20,2,15,11,12,13,3,9,20,15,14,19,2,10,12,7,15,18,14,16,19,5,17,7,14,16,8,9,4,19,17,16,12,6,5,18,13,18,4,16,11,5,17,15,11,4,7,16,9,12,7,5,14,10,8,15,13,9,11,6,14,10,12,8,13,8,12,11,10};
			for(size_t k=0;k<102;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 22 items
		template <typename T,typename U> static inline void on22(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[108] = {10,2,13,3,6,1,5,0,4,7,12,0,17,3,9,1,19,7,8,5,15,5,14,1,11,0,18,6,13,2,17,0,16,9,10,2,14,6,8,0,20,3,12,4,10,8,5,11,3,15,1,19,9,4,7,1,18,2,15,12,4,13,7,1,16,11,3,4,14,9,8,2,16,6,11,7,12,2,18,4,16,10,8,17,3,5,15,7,13,9,11,4,16,6,12,8,10,14,5,8,12,10,14,6,11,9,7,13};
			static const unsigned J[108] = {11,8,19,15,18,16,20,17,21,9,14,4,21,12,18,2,20,13,14,6,16,7,16,10,20,3,21,8,15,4,19,5,21,11,12,7,19,13,15,1,21,9,18,11,17,13,10,16,6,18,2,20,12,14,17,3,20,6,19,17,9,14,8,5,20,18,10,7,17,12,13,5,19,10,15,9,14,3,19,5,17,13,11,18,4,6,16,8,14,10,12,5,17,9,15,11,13,16,7,9,13,11,15,7,12,10,8,14};
			for(size_t k=0;k<108;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 23 items
		template <typename T,typename U> static inline void on23(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[118] = {1,2,5,9,0,15,4,6,10,8,14,3,4,11,2,16,0,13,5,7,1,12,8,17,0,20,1,3,12,9,6,7,18,21,0,8,17,2,9,10,19,0,11,6,15,20,1,5,4,14,3,13,10,4,16,8,7,4,18,9,11,16,12,1,19,2,13,8,5,15,11,1,4,19,5,14,6,13,12,2,18,17,6,14,8,2,3,18,16,7,13,3,5,17,7,9,4,15,10,6,9,5,14,10,8,15,6,11,9,13,7,14,8,12,11,12,10,11};
			static const unsigned J[118] = {20,21,13,17,7,22,11,12,16,18,19,8,14,18,6,20,9,22,15,17,10,21,19,22,5,21,2,4,13,10,15,16,19,22,1,11,20,5,12,13,22,3,14,8,18,21,2,17,11,16,9,19,11,7,18,14,15,6,21,10,13,20,14,4,21,6,18,12,7,17,16,3,9,20,8,17,10,16,15,3,20,19,9,15,12,4,5,19,17,9,15,4,6,18,8,10,5,17,14,11,12,7,16,11,9,16,7,13,10,14,8,15,9,14,12,13,11,12};
			for(size_t k=0;k<118;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 24 items
		template <typename T,typename U> static inline void on24(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[123] = {0,2,4,6,8,10,12,14,16,18,20,22,1,5,9,0,4,8,13,17,21,12,16,20,1,5,9,13,17,21,0,7,12,19,1,6,13,18,3,4,15,16,5,2,17,14,0,7,12,19,3,15,1,6,13,18,2,8,14,20,0,11,1,7,13,19,3,6,15,18,2,7,14,19,5,17,1,10,3,7,15,19,2,5,6,9,3,4,7,8,2,11,6,9,3,10,4,7,8,11,1,21,5,10,8,11,3,19,9,10,6,15,10,14,7,11,5,17,7,9,11,13,15};
			static const unsigned J[123] = {1,3,5,7,9,11,13,15,17,19,21,23,3,7,11,2,6,10,15,19,23,14,18,22,2,6,10,14,18,22,4,11,16,23,5,10,17,22,7,8,19,20,9,6,21,18,4,11,16,23,8,20,5,10,17,22,3,9,15,21,12,23,4,10,16,22,5,8,17,20,4,9,16,21,6,18,13,22,4,8,16,20,14,17,18,21,15,16,19,20,12,21,14,17,13,20,12,15,16,19,2,22,13,18,12,15,4,20,13,14,8,17,12,16,9,13,6,18,8,10,12,14,16};
			for(size_t k=0;k<123;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 25 items
		template <typename T,typename U> static inline void on25(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[154] = {1,4,7,10,13,16,19,21,23,0,3,6,9,12,15,18,21,22,0,3,2,6,9,8,12,15,14,18,22,20,0,1,6,7,5,12,13,18,19,17,2,1,8,7,0,14,13,18,20,11,2,8,1,4,14,19,20,16,2,1,3,5,20,12,15,17,2,4,12,13,14,16,10,2,5,4,14,13,17,11,3,5,14,16,17,0,9,5,4,14,15,17,0,8,10,5,15,17,1,7,11,16,2,1,6,8,11,17,2,3,7,10,2,4,5,8,11,2,5,4,3,9,5,3,4,10,5,4,11,9,10,5,8,11,10,5,7,11,5,6,8,11,6,8,10,11,7,9,11,8,11,9,10,11};
			static const unsigned J[154] = {2,5,8,11,14,17,20,22,24,2,5,8,11,14,17,20,23,24,1,4,5,7,10,11,13,16,17,19,23,24,3,4,9,10,11,15,16,22,23,24,4,3,10,9,6,16,15,21,23,24,3,9,7,10,15,21,22,23,8,6,9,10,21,19,22,23,7,9,18,20,21,22,23,6,9,7,20,18,22,23,6,8,19,20,21,13,22,7,6,18,19,20,12,21,22,6,18,19,14,20,22,18,15,12,19,20,21,18,14,16,19,20,13,17,18,19,20,12,17,16,13,19,16,12,14,19,15,12,19,16,17,14,15,18,16,13,14,17,12,13,14,16,12,13,14,15,12,13,14,12,13,12,12,12};
			for(size_t k=0;k<154;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 26 items
		template <typename T,typename U> static inline void on26(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[163] = {1,4,7,9,11,14,17,20,22,24,0,3,6,9,10,13,16,19,22,23,0,3,2,6,10,8,13,16,15,19,23,21,0,1,6,7,5,13,14,19,20,18,2,1,6,8,15,14,19,21,12,2,7,8,4,15,20,21,17,8,0,3,5,21,13,16,18,0,1,2,4,13,14,15,17,11,2,1,5,15,14,18,0,12,2,4,5,15,17,18,1,10,2,3,5,15,16,18,1,9,12,3,5,16,18,2,8,10,4,17,2,3,7,11,5,18,2,4,8,12,11,5,4,3,6,10,12,5,4,7,12,5,4,8,5,9,5,10,8,9,5,11,7,10,12,6,8,10,11,7,12,11,10,8,12,11,12,9,10,12,11,12,12};
			static const unsigned J[163] = {2,5,8,10,12,15,18,21,23,25,2,5,8,11,12,15,18,21,24,25,1,4,5,7,11,12,14,17,18,20,24,25,3,4,10,11,12,16,17,23,24,25,4,3,9,11,17,16,22,24,25,3,9,10,11,16,22,23,24,9,7,10,11,22,20,23,24,6,8,9,10,19,21,22,23,24,8,6,10,21,19,23,13,24,7,8,9,20,21,22,14,23,6,7,8,19,20,21,13,22,23,6,7,19,20,15,21,22,6,19,14,16,20,22,6,19,13,17,20,22,21,18,16,13,19,20,21,17,14,19,20,16,13,19,15,19,14,19,15,16,13,19,14,17,19,13,14,16,18,13,18,16,14,13,17,15,16,13,13,15,13,14,13};
			for(size_t k=0;k<163;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 27 items
		template <typename T,typename U> static inline void on27(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[173] = {1,4,7,9,11,14,16,18,21,23,25,0,3,6,9,10,13,16,17,20,23,24,0,3,2,6,10,8,13,17,15,20,24,22,0,1,6,7,5,13,14,20,21,19,2,1,6,8,13,15,20,22,12,2,7,8,4,14,15,21,22,13,18,8,0,3,5,15,22,14,17,19,0,1,2,4,15,14,16,19,11,2,1,5,15,17,0,12,2,4,5,15,18,17,0,10,2,3,5,19,16,18,1,12,3,5,17,19,2,1,9,4,18,19,2,3,8,10,5,19,2,4,7,11,2,5,4,3,6,8,12,11,5,3,4,7,10,12,5,4,8,12,5,9,5,10,9,5,11,8,10,5,12,7,10,11,6,8,12,11,7,12,10,11,8,12,12,9,10,12,11,12,12};
			static const unsigned J[173] = {2,5,8,10,12,15,17,19,22,24,26,2,5,8,11,12,15,18,19,22,25,26,1,4,5,7,11,12,14,18,19,21,25,26,3,4,10,11,12,17,18,24,25,26,4,3,9,11,16,18,23,25,26,3,9,10,11,16,17,23,24,20,25,9,7,10,11,16,23,21,24,25,6,8,9,10,22,20,23,24,25,8,6,10,21,23,14,25,7,8,9,20,23,21,13,24,6,7,8,23,20,22,15,24,6,7,20,22,16,13,23,6,20,21,15,17,22,23,6,20,14,18,21,23,13,19,17,14,20,21,23,22,18,13,15,20,21,22,17,13,20,21,16,20,15,20,16,14,20,15,17,13,20,14,16,18,13,14,19,16,13,18,14,15,13,17,16,13,13,15,13,14,13};
			for(size_t k=0;k<173;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 28 items
		template <typename T,typename U> static inline void on28(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[179] = {1,3,5,8,10,12,15,17,19,22,24,26,0,3,4,7,10,11,14,17,18,21,24,25,0,4,2,7,11,9,14,18,16,21,25,23,0,1,7,8,6,14,15,21,22,20,0,2,7,9,14,16,21,23,13,1,2,8,9,0,5,15,16,22,23,14,19,2,9,1,4,6,16,23,15,18,20,0,2,1,3,6,16,15,17,20,12,2,4,16,18,1,11,13,2,5,4,16,19,18,1,13,6,3,5,20,17,19,2,4,6,18,20,2,3,10,5,6,19,20,2,4,9,11,6,20,4,5,3,8,12,6,5,4,7,9,13,12,6,4,5,8,11,13,6,5,9,13,6,10,6,11,10,6,12,9,11,6,13,8,11,12,7,9,13,12,8,13,11,12,9,13,13,10,11,13,12,13,13};
			static const unsigned J[179] = {2,4,6,9,11,13,16,18,20,23,25,27,2,5,6,9,12,13,16,19,20,23,26,27,1,5,6,8,12,13,15,19,20,22,26,27,4,5,11,12,13,18,19,25,26,27,3,5,10,12,17,19,24,26,27,3,4,10,11,7,12,17,18,24,25,21,26,3,10,8,11,12,17,24,22,25,26,14,9,7,10,11,23,21,24,25,26,8,10,22,24,15,25,26,7,10,8,21,24,22,14,25,10,7,9,24,21,23,16,7,9,21,23,15,17,24,7,8,21,22,14,18,23,24,7,21,17,19,14,22,24,20,17,15,21,22,24,23,19,14,16,21,22,23,18,14,21,22,17,21,16,21,17,15,21,16,18,14,21,15,17,19,14,15,20,17,14,19,15,16,14,18,17,14,14,16,14,15,14};
			for(size_t k=0;k<179;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 29 items
		template <typename T,typename U> static inline void on29(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[191] = {1,3,5,8,10,12,15,17,19,21,23,25,27,0,3,4,7,10,11,14,17,18,21,22,25,26,0,4,2,7,11,9,14,18,16,22,26,21,24,0,1,7,8,6,14,15,22,23,20,0,2,7,9,14,16,22,24,13,1,2,8,9,0,5,15,16,23,24,14,19,2,9,1,4,6,16,24,14,15,18,20,2,1,3,6,16,15,17,20,12,2,4,16,18,0,11,13,2,5,4,16,19,0,13,6,3,5,16,20,18,19,4,6,17,20,1,10,5,6,18,20,2,1,9,11,6,19,20,2,3,8,12,20,2,4,7,9,13,12,2,4,5,6,8,11,13,6,5,3,4,9,13,6,4,5,10,6,5,11,6,12,10,11,6,13,9,11,12,6,8,13,12,6,7,9,13,7,9,13,12,8,13,11,9,13,10,13,11,13,12,13};
			static const unsigned J[191] = {2,4,6,9,11,13,16,18,20,22,24,26,28,2,5,6,9,12,13,16,19,20,23,24,27,28,1,5,6,8,12,13,15,19,20,23,27,25,28,4,5,11,12,13,18,19,26,27,28,3,5,10,12,17,19,25,27,28,3,4,10,11,7,12,17,18,25,26,22,27,3,10,8,11,12,17,25,21,23,26,27,9,7,10,11,24,21,25,26,27,8,10,23,25,15,26,27,7,10,8,22,25,14,26,10,7,9,21,25,22,23,7,9,21,24,16,25,7,8,21,23,17,14,24,25,7,21,22,16,18,23,25,21,15,19,22,23,25,24,14,18,20,21,22,23,24,20,18,14,15,22,23,19,14,16,22,18,14,22,17,22,18,19,16,22,17,18,20,15,16,21,18,14,15,16,20,14,15,19,16,14,18,15,14,17,14,16,14,15,14,14};
			for(size_t k=0;k<191;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 30 items
		template <typename T,typename U> static inline void on30(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[198] = {1,3,5,7,9,11,13,16,18,20,22,24,26,28,0,3,4,7,8,11,12,15,18,19,22,23,26,27,0,4,2,8,12,7,10,15,19,17,23,27,22,25,0,1,8,9,6,15,16,23,24,21,0,2,8,10,15,17,23,25,14,1,2,9,10,0,5,16,17,24,25,15,20,2,10,0,1,4,6,17,25,15,16,19,21,2,1,3,6,17,16,18,21,0,13,2,4,17,19,1,12,14,2,5,17,20,1,14,2,6,4,5,17,21,19,20,3,6,18,21,2,11,4,6,19,21,2,3,10,12,5,6,20,21,2,4,9,13,6,21,4,5,3,8,10,14,6,5,4,7,10,13,14,6,4,5,8,12,14,6,5,9,14,6,10,6,11,10,6,12,9,11,6,13,8,10,12,14,7,10,12,13,8,14,13,12,9,14,13,10,14,11,14,12,14,13,14,14};
			static const unsigned J[198] = {2,4,6,8,10,12,14,17,19,21,23,25,27,29,2,5,6,9,10,13,14,17,20,21,24,25,28,29,1,5,6,9,13,11,14,16,20,21,24,28,26,29,4,5,12,13,14,19,20,27,28,29,3,5,11,13,18,20,26,28,29,3,4,11,12,8,13,18,19,26,27,23,28,3,11,7,9,12,13,18,26,22,24,27,28,10,7,11,12,25,22,26,27,15,28,9,11,24,26,16,27,28,8,11,23,26,15,27,7,11,8,9,22,26,23,24,7,10,22,25,17,26,7,9,22,24,16,18,25,26,7,8,22,23,15,19,24,26,7,22,18,20,15,23,24,26,21,18,16,22,23,24,25,20,15,17,22,23,24,19,15,22,23,18,22,17,22,18,16,22,17,19,15,22,16,17,20,22,15,16,19,21,15,21,19,16,15,20,17,15,19,15,18,15,17,15,16,15};
			for(size_t k=0;k<198;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 31 items
		template <typename T,typename U> static inline void on31(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[206] = {1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,0,3,4,7,8,11,12,15,16,19,20,23,24,27,28,0,4,2,8,12,7,10,16,20,15,18,24,28,23,26,0,1,8,9,6,16,17,24,25,15,22,0,2,8,10,16,18,24,26,14,1,2,9,10,0,5,17,18,25,26,16,21,2,10,0,1,4,6,18,26,16,17,20,22,2,1,3,6,18,17,19,22,0,13,2,4,18,20,0,1,12,14,2,5,18,21,1,14,2,6,4,5,18,22,20,21,3,6,19,22,2,11,4,6,20,22,2,3,10,12,5,6,21,22,2,4,9,13,6,22,2,4,5,8,10,14,6,5,3,4,7,10,13,14,6,4,5,8,12,14,6,5,9,14,6,10,6,11,6,12,10,11,6,13,9,12,6,14,8,10,12,13,7,10,14,13,8,14,12,13,9,14,10,14,11,14,12,14,13,14,14};
			static const unsigned J[206] = {2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,2,5,6,9,10,13,14,17,18,21,22,25,26,29,30,1,5,6,9,13,11,14,17,21,19,22,25,29,27,30,4,5,12,13,14,20,21,28,29,23,30,3,5,11,13,19,21,27,29,30,3,4,11,12,8,13,19,20,27,28,24,29,3,11,7,9,12,13,19,27,23,25,28,29,10,7,11,12,26,23,27,28,16,29,9,11,25,27,15,17,28,29,8,11,24,27,15,28,7,11,8,9,23,27,24,25,7,10,23,26,18,27,7,9,23,25,17,19,26,27,7,8,23,24,16,20,25,27,7,23,15,19,21,24,25,27,22,19,15,16,23,24,25,26,21,15,17,23,24,25,20,15,23,24,19,23,18,23,17,23,18,19,16,23,17,20,15,23,16,17,19,21,15,16,22,19,15,21,16,17,15,20,15,19,15,18,15,17,15,16,15};
			for(size_t k=0;k<206;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 32 items
		template <typename T,typename U> static inline void on32(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[211] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,1,4,5,8,9,12,13,16,17,20,21,24,25,28,29,1,5,0,3,9,13,8,11,17,21,16,19,25,29,24,27,1,2,9,10,0,7,17,18,25,26,16,23,1,3,9,11,17,19,25,27,0,15,2,3,10,11,1,6,18,19,26,27,17,22,3,11,1,2,5,7,19,27,17,18,21,23,3,2,4,7,19,18,20,23,1,14,3,5,19,21,1,2,13,15,3,6,19,22,2,15,3,7,5,6,19,23,21,22,4,7,20,23,3,12,5,7,21,23,3,4,11,13,6,7,22,23,3,5,10,14,7,23,3,5,6,9,11,15,7,6,4,5,8,11,14,15,7,5,6,9,13,15,7,6,10,15,7,11,7,12,7,13,11,12,7,14,10,13,7,15,9,11,13,14,8,11,15,14,9,15,13,14,10,15,11,15,12,15,13,15,14,15,15};
			static const unsigned J[211] = {1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,2,3,6,7,10,11,14,15,18,19,22,23,26,27,30,31,2,6,4,7,10,14,12,15,18,22,20,23,26,30,28,31,5,6,13,14,8,15,21,22,29,30,24,31,4,6,12,14,20,22,28,30,16,31,4,5,12,13,9,14,20,21,28,29,25,30,4,12,8,10,13,14,20,28,24,26,29,30,11,8,12,13,27,24,28,29,17,30,10,12,26,28,16,18,29,30,9,12,25,28,16,29,8,12,9,10,24,28,25,26,8,11,24,27,19,28,8,10,24,26,18,20,27,28,8,9,24,25,17,21,26,28,8,24,16,20,22,25,26,28,23,20,16,17,24,25,26,27,22,16,18,24,25,26,21,16,24,25,20,24,19,24,18,24,19,20,17,24,18,21,16,24,17,18,20,22,16,17,23,20,16,22,17,18,16,21,16,20,16,19,16,18,16,17,16};
			for(size_t k=0;k<211;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 0-32 items
		template <typename T, typename U> static inline void on(T *a, U *b, const size_t n) {
			switch(n) {
				case  2: on2(a,b);  break;
				case  3: on3(a,b);  break;
				case  4: on4(a,b);  break;
				case  5: on5(a,b);  break;
				case  6: on6(a,b);  break;
				case  7: on7(a,b);  break;
				case  8: on8(a,b);  break;
				case  9: on9(a,b);  break;
				case 10: on10(a,b); break;
				case 11: on11(a,b); break;
				case 12: on12(a,b); break;
				case 13: on13(a,b); break;
				case 14: on14(a,b); break;
				case 15: on15(a,b); break;
				case 16: on16(a,b); break;
				case 17: on17(a,b); break;
				case 18: on18(a,b); break;
				case 19: on19(a,b); break;
				case 20: on20(a,b); break;
				case 21: on21(a,b); break;
				case 22: on22(a,b); break;
				case 23: on23(a,b); break;
				case 24: on24(a,b); break;
				case 25: on25(a,b); break;
				case 26: on26(a,b); break;
				case 27: on27(a,b); break;
				case 28: on28(a,b); break;
				case 29: on29(a,b); break;
				case 30: on30(a,b); break;
				case 31: on31(a,b); break;
				case 32: on32(a,b); break;
				default: break;
			}
		}
	};
}
#endif
