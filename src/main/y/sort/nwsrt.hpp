//! \file
#ifndef Y_NWSRT_INCLUDED
#define Y_NWSRT_INCLUDED 1
#include "y/type/bswap.hpp"
//! swapping the pair I,J
#define Y_NWSRT_SWAP(I,J) { T &aI = a[I]; T &aJ = a[J]; if(aJ<aI) core::bswap< sizeof(T) >( &aI, &aJ ); }
//! swapping two pairs I,J
#define Y_NWSRT_SWP2(I,J) { const unsigned II = I; const unsigned JJ = J; T &aI = a[II]; T &aJ = a[JJ]; if(aJ<aI) { core::bswap< sizeof(T) >( &aI, &aJ ); core::bswap< sizeof(U) >( &b[II],&b[JJ]); } }
namespace upsylon {
	//! network sorting
	struct nwsrt {
		static const size_t max_size=32; //!< max handled case
		//!built-in version on 2 items
		template <typename T> static inline void on2(T *a) {
			assert(a);
			static const unsigned I[1] = {0x00};
			static const unsigned J[1] = {0x01};
			for(size_t k=0;k<1;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 3 items
		template <typename T> static inline void on3(T *a) {
			assert(a);
			static const unsigned I[3] = {0x01,0x00,0x00};
			static const unsigned J[3] = {0x02,0x02,0x01};
			for(size_t k=0;k<3;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 4 items
		template <typename T> static inline void on4(T *a) {
			assert(a);
			static const unsigned I[5] = {0x00,0x02,0x00,0x01,0x01};
			static const unsigned J[5] = {0x01,0x03,0x02,0x03,0x02};
			for(size_t k=0;k<5;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 5 items
		template <typename T> static inline void on5(T *a) {
			assert(a);
			static const unsigned I[9] = {0x00,0x03,0x02,0x02,0x01,0x00,0x00,0x01,0x01};
			static const unsigned J[9] = {0x01,0x04,0x04,0x03,0x04,0x03,0x02,0x03,0x02};
			for(size_t k=0;k<9;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 6 items
		template <typename T> static inline void on6(T *a) {
			assert(a);
			static const unsigned I[12] = {0x01,0x04,0x00,0x03,0x00,0x03,0x02,0x00,0x01,0x02,0x01,0x02};
			static const unsigned J[12] = {0x02,0x05,0x02,0x05,0x01,0x04,0x05,0x03,0x04,0x04,0x03,0x03};
			for(size_t k=0;k<12;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 7 items
		template <typename T> static inline void on7(T *a) {
			assert(a);
			static const unsigned I[16] = {0x01,0x03,0x05,0x00,0x03,0x04,0x00,0x04,0x02,0x00,0x01,0x00,0x02,0x01,0x02,0x02};
			static const unsigned J[16] = {0x02,0x04,0x06,0x02,0x05,0x06,0x01,0x05,0x06,0x04,0x05,0x03,0x05,0x03,0x04,0x03};
			for(size_t k=0;k<16;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 8 items
		template <typename T> static inline void on8(T *a) {
			assert(a);
			static const unsigned I[19] = {0x00,0x02,0x04,0x06,0x00,0x01,0x04,0x05,0x01,0x05,0x00,0x03,0x01,0x02,0x01,0x03,0x02,0x03,0x03};
			static const unsigned J[19] = {0x01,0x03,0x05,0x07,0x02,0x03,0x06,0x07,0x02,0x06,0x04,0x07,0x05,0x06,0x04,0x06,0x04,0x05,0x04};
			for(size_t k=0;k<19;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 9 items
		template <typename T> static inline void on9(T *a) {
			assert(a);
			static const unsigned I[25] = {0x02,0x00,0x01,0x07,0x00,0x01,0x03,0x04,0x05,0x01,0x02,0x06,0x00,0x04,0x03,0x03,0x05,0x01,0x01,0x06,0x04,0x02,0x05,0x02,0x04};
			static const unsigned J[25] = {0x06,0x05,0x04,0x08,0x07,0x02,0x05,0x06,0x08,0x03,0x07,0x08,0x01,0x05,0x07,0x04,0x06,0x02,0x03,0x07,0x05,0x04,0x06,0x03,0x05};
			for(size_t k=0;k<25;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 10 items
		template <typename T> static inline void on10(T *a) {
			assert(a);
			static const unsigned I[29] = {0x01,0x07,0x02,0x05,0x00,0x02,0x00,0x08,0x03,0x04,0x00,0x03,0x00,0x06,0x04,0x01,0x03,0x05,0x06,0x01,0x07,0x01,0x02,0x04,0x02,0x06,0x04,0x03,0x05};
			static const unsigned J[29] = {0x04,0x08,0x03,0x06,0x09,0x05,0x07,0x09,0x06,0x09,0x01,0x05,0x02,0x09,0x07,0x08,0x04,0x08,0x07,0x02,0x08,0x03,0x05,0x06,0x03,0x07,0x05,0x04,0x06};
			for(size_t k=0;k<29;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 11 items
		template <typename T> static inline void on11(T *a) {
			assert(a);
			static const unsigned I[35] = {0x00,0x02,0x04,0x06,0x08,0x01,0x05,0x00,0x04,0x08,0x01,0x05,0x09,0x00,0x03,0x01,0x06,0x04,0x05,0x02,0x00,0x03,0x01,0x06,0x02,0x08,0x01,0x07,0x03,0x06,0x02,0x07,0x05,0x03,0x07};
			static const unsigned J[35] = {0x01,0x03,0x05,0x07,0x09,0x03,0x07,0x02,0x06,0x10,0x02,0x06,0x10,0x04,0x07,0x05,0x10,0x08,0x09,0x06,0x04,0x08,0x05,0x10,0x03,0x09,0x04,0x10,0x05,0x08,0x04,0x09,0x06,0x04,0x08};
			for(size_t k=0;k<35;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 12 items
		template <typename T> static inline void on12(T *a) {
			assert(a);
			static const unsigned I[39] = {0x00,0x02,0x04,0x03,0x08,0x01,0x05,0x01,0x00,0x02,0x09,0x07,0x07,0x10,0x01,0x04,0x06,0x00,0x05,0x03,0x01,0x02,0x07,0x06,0x02,0x04,0x08,0x05,0x01,0x09,0x06,0x03,0x08,0x02,0x04,0x06,0x07,0x05,0x03};
			static const unsigned J[39] = {0x05,0x07,0x10,0x06,0x11,0x09,0x06,0x08,0x03,0x04,0x11,0x10,0x09,0x11,0x02,0x08,0x11,0x01,0x08,0x07,0x04,0x05,0x10,0x09,0x03,0x06,0x10,0x07,0x02,0x10,0x08,0x04,0x09,0x03,0x05,0x07,0x08,0x06,0x04};
			for(size_t k=0;k<39;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 13 items
		template <typename T> static inline void on13(T *a) {
			assert(a);
			static const unsigned I[45] = {0x04,0x00,0x03,0x02,0x06,0x01,0x00,0x02,0x05,0x07,0x01,0x10,0x09,0x00,0x08,0x03,0x08,0x11,0x07,0x04,0x02,0x05,0x04,0x10,0x00,0x03,0x01,0x06,0x03,0x01,0x09,0x06,0x05,0x01,0x02,0x09,0x06,0x02,0x05,0x07,0x03,0x08,0x06,0x04,0x05};
			static const unsigned J[45] = {0x08,0x09,0x07,0x05,0x11,0x12,0x06,0x04,0x08,0x12,0x03,0x11,0x11,0x01,0x12,0x06,0x10,0x12,0x09,0x06,0x08,0x09,0x07,0x11,0x02,0x05,0x08,0x09,0x04,0x02,0x11,0x10,0x07,0x03,0x04,0x10,0x08,0x03,0x06,0x08,0x05,0x09,0x07,0x05,0x06};
			for(size_t k=0;k<45;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 14 items
		template <typename T> static inline void on14(T *a) {
			assert(a);
			static const unsigned I[51] = {0x00,0x02,0x08,0x04,0x01,0x07,0x09,0x03,0x04,0x05,0x01,0x10,0x00,0x11,0x00,0x01,0x06,0x02,0x03,0x12,0x00,0x09,0x03,0x06,0x07,0x05,0x02,0x04,0x01,0x08,0x10,0x02,0x03,0x05,0x11,0x01,0x08,0x03,0x06,0x02,0x10,0x07,0x05,0x04,0x08,0x06,0x09,0x03,0x05,0x07,0x06};
			static const unsigned J[51] = {0x06,0x03,0x12,0x05,0x10,0x13,0x11,0x06,0x07,0x13,0x08,0x12,0x02,0x12,0x09,0x04,0x13,0x07,0x05,0x13,0x01,0x10,0x08,0x11,0x10,0x08,0x09,0x06,0x03,0x12,0x11,0x04,0x09,0x07,0x12,0x02,0x10,0x04,0x09,0x03,0x11,0x08,0x06,0x05,0x09,0x07,0x10,0x04,0x06,0x08,0x07};
			for(size_t k=0;k<51;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 15 items
		template <typename T> static inline void on15(T *a) {
			assert(a);
			static const unsigned I[56] = {0x12,0x05,0x03,0x02,0x04,0x06,0x01,0x11,0x01,0x07,0x00,0x04,0x02,0x08,0x00,0x09,0x01,0x05,0x07,0x11,0x03,0x00,0x05,0x09,0x08,0x02,0x06,0x03,0x02,0x12,0x10,0x01,0x08,0x04,0x06,0x13,0x01,0x03,0x10,0x04,0x07,0x12,0x02,0x10,0x05,0x04,0x09,0x06,0x07,0x11,0x03,0x09,0x05,0x07,0x08,0x06};
			static const unsigned J[56] = {0x13,0x07,0x11,0x10,0x09,0x08,0x14,0x14,0x03,0x10,0x12,0x06,0x05,0x09,0x02,0x14,0x04,0x06,0x08,0x13,0x12,0x01,0x11,0x10,0x12,0x04,0x13,0x07,0x03,0x14,0x13,0x05,0x11,0x09,0x07,0x14,0x02,0x05,0x12,0x08,0x09,0x13,0x03,0x11,0x06,0x05,0x11,0x08,0x10,0x12,0x04,0x10,0x06,0x08,0x09,0x07};
			for(size_t k=0;k<56;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 16 items
		template <typename T> static inline void on16(T *a) {
			assert(a);
			static const unsigned I[61] = {0x00,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x01,0x05,0x09,0x13,0x00,0x04,0x08,0x12,0x03,0x11,0x02,0x10,0x01,0x09,0x00,0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,0x01,0x03,0x13,0x04,0x07,0x05,0x06,0x02,0x07,0x03,0x05,0x01,0x06,0x11,0x02,0x06,0x10,0x03,0x07,0x11,0x03,0x07,0x05,0x09,0x03,0x05,0x07,0x09,0x11};
			static const unsigned J[61] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x03,0x07,0x11,0x15,0x02,0x06,0x10,0x14,0x07,0x15,0x06,0x14,0x05,0x13,0x04,0x12,0x15,0x14,0x13,0x12,0x11,0x10,0x09,0x08,0x02,0x12,0x14,0x08,0x11,0x10,0x09,0x08,0x13,0x09,0x12,0x04,0x10,0x14,0x04,0x08,0x12,0x05,0x09,0x13,0x06,0x10,0x08,0x12,0x04,0x06,0x08,0x10,0x12};
			for(size_t k=0;k<61;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 17 items
		template <typename T> static inline void on17(T *a) {
			assert(a);
			static const unsigned I[71] = {0x05,0x04,0x07,0x00,0x02,0x01,0x03,0x06,0x03,0x08,0x04,0x09,0x00,0x14,0x01,0x10,0x03,0x11,0x00,0x12,0x02,0x07,0x01,0x13,0x05,0x06,0x00,0x15,0x05,0x06,0x02,0x09,0x12,0x08,0x04,0x07,0x11,0x01,0x08,0x04,0x06,0x10,0x01,0x02,0x09,0x06,0x14,0x01,0x03,0x13,0x11,0x02,0x03,0x10,0x13,0x03,0x10,0x07,0x03,0x12,0x05,0x08,0x11,0x04,0x06,0x09,0x05,0x06,0x09,0x08,0x07};
			static const unsigned J[71] = {0x11,0x09,0x12,0x14,0x16,0x15,0x08,0x13,0x10,0x13,0x07,0x12,0x02,0x16,0x06,0x15,0x05,0x13,0x04,0x16,0x09,0x14,0x03,0x15,0x10,0x11,0x01,0x16,0x07,0x08,0x03,0x11,0x13,0x10,0x06,0x09,0x13,0x02,0x14,0x05,0x12,0x14,0x08,0x05,0x12,0x07,0x15,0x04,0x10,0x15,0x14,0x04,0x08,0x12,0x14,0x06,0x11,0x08,0x04,0x13,0x06,0x09,0x12,0x05,0x08,0x11,0x07,0x07,0x10,0x09,0x08};
			for(size_t k=0;k<71;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 18 items
		template <typename T> static inline void on18(T *a) {
			assert(a);
			static const unsigned I[84] = {0x00,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16,0x00,0x01,0x04,0x05,0x08,0x09,0x12,0x13,0x15,0x00,0x01,0x02,0x03,0x09,0x08,0x11,0x13,0x14,0x07,0x06,0x03,0x10,0x11,0x09,0x02,0x01,0x00,0x16,0x07,0x05,0x03,0x06,0x04,0x02,0x08,0x00,0x01,0x14,0x06,0x07,0x05,0x03,0x04,0x04,0x14,0x05,0x07,0x01,0x12,0x03,0x10,0x05,0x11,0x02,0x12,0x06,0x09,0x07,0x03,0x12,0x02,0x13,0x06,0x10,0x13,0x11,0x09,0x07,0x05,0x03,0x12,0x10,0x08,0x06,0x04};
			static const unsigned J[84] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x17,0x02,0x03,0x06,0x07,0x10,0x11,0x17,0x14,0x16,0x04,0x05,0x06,0x07,0x10,0x12,0x16,0x15,0x17,0x16,0x17,0x05,0x14,0x12,0x15,0x04,0x13,0x08,0x17,0x14,0x12,0x15,0x13,0x10,0x11,0x09,0x01,0x08,0x16,0x09,0x13,0x11,0x10,0x15,0x08,0x15,0x09,0x11,0x02,0x16,0x06,0x13,0x08,0x14,0x03,0x13,0x07,0x10,0x09,0x05,0x14,0x04,0x15,0x08,0x11,0x14,0x12,0x10,0x08,0x06,0x04,0x13,0x11,0x09,0x07,0x05};
			for(size_t k=0;k<84;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 19 items
		template <typename T> static inline void on19(T *a) {
			assert(a);
			static const unsigned I[86] = {0x04,0x03,0x00,0x07,0x08,0x06,0x15,0x01,0x09,0x02,0x11,0x07,0x06,0x10,0x03,0x13,0x00,0x14,0x01,0x05,0x03,0x17,0x04,0x09,0x13,0x01,0x12,0x02,0x07,0x05,0x00,0x16,0x06,0x02,0x11,0x12,0x00,0x01,0x08,0x04,0x15,0x11,0x10,0x03,0x01,0x05,0x06,0x08,0x14,0x01,0x05,0x10,0x02,0x07,0x09,0x08,0x16,0x14,0x02,0x09,0x04,0x07,0x15,0x02,0x13,0x05,0x06,0x12,0x03,0x10,0x04,0x06,0x14,0x04,0x07,0x11,0x09,0x13,0x06,0x10,0x08,0x12,0x05,0x07,0x09,0x11};
			static const unsigned J[86] = {0x10,0x12,0x16,0x14,0x11,0x13,0x17,0x05,0x18,0x05,0x16,0x09,0x15,0x12,0x04,0x17,0x08,0x18,0x02,0x16,0x07,0x18,0x15,0x10,0x14,0x06,0x16,0x11,0x13,0x10,0x01,0x18,0x08,0x09,0x15,0x17,0x03,0x07,0x14,0x06,0x16,0x12,0x14,0x04,0x02,0x07,0x13,0x09,0x17,0x03,0x06,0x15,0x04,0x13,0x12,0x11,0x17,0x15,0x05,0x10,0x06,0x11,0x16,0x03,0x14,0x08,0x11,0x14,0x05,0x13,0x08,0x09,0x15,0x05,0x08,0x12,0x10,0x14,0x07,0x11,0x09,0x13,0x06,0x08,0x10,0x12};
			for(size_t k=0;k<86;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 20 items
		template <typename T> static inline void on20(T *a) {
			assert(a);
			static const unsigned I[102] = {0x00,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16,0x18,0x01,0x05,0x09,0x13,0x17,0x00,0x04,0x08,0x12,0x16,0x03,0x09,0x15,0x02,0x14,0x01,0x13,0x00,0x12,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,0x02,0x03,0x11,0x17,0x01,0x05,0x09,0x10,0x06,0x00,0x01,0x02,0x07,0x16,0x03,0x08,0x05,0x10,0x12,0x01,0x04,0x09,0x13,0x17,0x00,0x07,0x08,0x06,0x00,0x03,0x07,0x14,0x18,0x02,0x05,0x11,0x15,0x08,0x02,0x04,0x09,0x12,0x16,0x01,0x05,0x07,0x13,0x01,0x04,0x07,0x10,0x12,0x14,0x16,0x18,0x00,0x06,0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15};
			static const unsigned J[102] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x17,0x19,0x03,0x07,0x11,0x15,0x19,0x02,0x06,0x10,0x14,0x18,0x07,0x10,0x19,0x06,0x18,0x05,0x17,0x04,0x16,0x19,0x18,0x17,0x16,0x15,0x14,0x13,0x12,0x19,0x08,0x16,0x18,0x04,0x15,0x14,0x13,0x12,0x19,0x18,0x06,0x15,0x17,0x04,0x14,0x09,0x11,0x13,0x03,0x05,0x12,0x16,0x18,0x15,0x14,0x11,0x10,0x01,0x06,0x13,0x17,0x19,0x04,0x10,0x12,0x16,0x09,0x03,0x08,0x11,0x15,0x18,0x17,0x06,0x10,0x14,0x03,0x05,0x09,0x11,0x13,0x15,0x17,0x19,0x02,0x08,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16};
			for(size_t k=0;k<102;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 21 items
		template <typename T> static inline void on21(T *a) {
			assert(a);
			static const unsigned I[102] = {0x05,0x11,0x01,0x02,0x06,0x00,0x03,0x04,0x12,0x07,0x01,0x13,0x02,0x09,0x04,0x08,0x03,0x15,0x00,0x10,0x00,0x02,0x17,0x01,0x16,0x07,0x12,0x14,0x00,0x09,0x04,0x05,0x16,0x19,0x00,0x14,0x10,0x05,0x06,0x01,0x04,0x18,0x08,0x07,0x17,0x01,0x06,0x03,0x05,0x13,0x11,0x09,0x08,0x18,0x04,0x13,0x02,0x10,0x12,0x03,0x06,0x01,0x15,0x11,0x14,0x08,0x03,0x04,0x15,0x11,0x17,0x02,0x15,0x10,0x04,0x16,0x13,0x09,0x03,0x05,0x15,0x08,0x11,0x06,0x04,0x12,0x08,0x06,0x14,0x12,0x07,0x10,0x05,0x13,0x07,0x11,0x06,0x09,0x07,0x09,0x09,0x09};
			static const unsigned J[102] = {0x09,0x15,0x19,0x14,0x18,0x17,0x20,0x08,0x16,0x13,0x07,0x19,0x11,0x18,0x12,0x16,0x05,0x17,0x10,0x20,0x06,0x03,0x18,0x04,0x19,0x08,0x13,0x20,0x01,0x10,0x11,0x06,0x17,0x20,0x02,0x15,0x11,0x12,0x13,0x03,0x09,0x20,0x15,0x14,0x19,0x02,0x10,0x12,0x07,0x15,0x18,0x14,0x16,0x19,0x05,0x17,0x07,0x14,0x16,0x08,0x09,0x04,0x19,0x17,0x16,0x12,0x06,0x05,0x18,0x13,0x18,0x04,0x16,0x11,0x05,0x17,0x15,0x11,0x04,0x07,0x16,0x09,0x12,0x07,0x05,0x14,0x10,0x08,0x15,0x13,0x09,0x11,0x06,0x14,0x10,0x12,0x08,0x13,0x08,0x12,0x11,0x10};
			for(size_t k=0;k<102;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 22 items
		template <typename T> static inline void on22(T *a) {
			assert(a);
			static const unsigned I[108] = {0x10,0x02,0x13,0x03,0x06,0x01,0x05,0x00,0x04,0x07,0x12,0x00,0x17,0x03,0x09,0x01,0x19,0x07,0x08,0x05,0x15,0x05,0x14,0x01,0x11,0x00,0x18,0x06,0x13,0x02,0x17,0x00,0x16,0x09,0x10,0x02,0x14,0x06,0x08,0x00,0x20,0x03,0x12,0x04,0x10,0x08,0x05,0x11,0x03,0x15,0x01,0x19,0x09,0x04,0x07,0x01,0x18,0x02,0x15,0x12,0x04,0x13,0x07,0x01,0x16,0x11,0x03,0x04,0x14,0x09,0x08,0x02,0x16,0x06,0x11,0x07,0x12,0x02,0x18,0x04,0x16,0x10,0x08,0x17,0x03,0x05,0x15,0x07,0x13,0x09,0x11,0x04,0x16,0x06,0x12,0x08,0x10,0x14,0x05,0x08,0x12,0x10,0x14,0x06,0x11,0x09,0x07,0x13};
			static const unsigned J[108] = {0x11,0x08,0x19,0x15,0x18,0x16,0x20,0x17,0x21,0x09,0x14,0x04,0x21,0x12,0x18,0x02,0x20,0x13,0x14,0x06,0x16,0x07,0x16,0x10,0x20,0x03,0x21,0x08,0x15,0x04,0x19,0x05,0x21,0x11,0x12,0x07,0x19,0x13,0x15,0x01,0x21,0x09,0x18,0x11,0x17,0x13,0x10,0x16,0x06,0x18,0x02,0x20,0x12,0x14,0x17,0x03,0x20,0x06,0x19,0x17,0x09,0x14,0x08,0x05,0x20,0x18,0x10,0x07,0x17,0x12,0x13,0x05,0x19,0x10,0x15,0x09,0x14,0x03,0x19,0x05,0x17,0x13,0x11,0x18,0x04,0x06,0x16,0x08,0x14,0x10,0x12,0x05,0x17,0x09,0x15,0x11,0x13,0x16,0x07,0x09,0x13,0x11,0x15,0x07,0x12,0x10,0x08,0x14};
			for(size_t k=0;k<108;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 23 items
		template <typename T> static inline void on23(T *a) {
			assert(a);
			static const unsigned I[118] = {0x01,0x02,0x05,0x09,0x00,0x15,0x04,0x06,0x10,0x08,0x14,0x03,0x04,0x11,0x02,0x16,0x00,0x13,0x05,0x07,0x01,0x12,0x08,0x17,0x00,0x20,0x01,0x03,0x12,0x09,0x06,0x07,0x18,0x21,0x00,0x08,0x17,0x02,0x09,0x10,0x19,0x00,0x11,0x06,0x15,0x20,0x01,0x05,0x04,0x14,0x03,0x13,0x10,0x04,0x16,0x08,0x07,0x04,0x18,0x09,0x11,0x16,0x12,0x01,0x19,0x02,0x13,0x08,0x05,0x15,0x11,0x01,0x04,0x19,0x05,0x14,0x06,0x13,0x12,0x02,0x18,0x17,0x06,0x14,0x08,0x02,0x03,0x18,0x16,0x07,0x13,0x03,0x05,0x17,0x07,0x09,0x04,0x15,0x10,0x06,0x09,0x05,0x14,0x10,0x08,0x15,0x06,0x11,0x09,0x13,0x07,0x14,0x08,0x12,0x11,0x12,0x10,0x11};
			static const unsigned J[118] = {0x20,0x21,0x13,0x17,0x07,0x22,0x11,0x12,0x16,0x18,0x19,0x08,0x14,0x18,0x06,0x20,0x09,0x22,0x15,0x17,0x10,0x21,0x19,0x22,0x05,0x21,0x02,0x04,0x13,0x10,0x15,0x16,0x19,0x22,0x01,0x11,0x20,0x05,0x12,0x13,0x22,0x03,0x14,0x08,0x18,0x21,0x02,0x17,0x11,0x16,0x09,0x19,0x11,0x07,0x18,0x14,0x15,0x06,0x21,0x10,0x13,0x20,0x14,0x04,0x21,0x06,0x18,0x12,0x07,0x17,0x16,0x03,0x09,0x20,0x08,0x17,0x10,0x16,0x15,0x03,0x20,0x19,0x09,0x15,0x12,0x04,0x05,0x19,0x17,0x09,0x15,0x04,0x06,0x18,0x08,0x10,0x05,0x17,0x14,0x11,0x12,0x07,0x16,0x11,0x09,0x16,0x07,0x13,0x10,0x14,0x08,0x15,0x09,0x14,0x12,0x13,0x11,0x12};
			for(size_t k=0;k<118;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 24 items
		template <typename T> static inline void on24(T *a) {
			assert(a);
			static const unsigned I[123] = {0x00,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16,0x18,0x20,0x22,0x01,0x05,0x09,0x00,0x04,0x08,0x13,0x17,0x21,0x12,0x16,0x20,0x01,0x05,0x09,0x13,0x17,0x21,0x00,0x07,0x12,0x19,0x01,0x06,0x13,0x18,0x03,0x04,0x15,0x16,0x05,0x02,0x17,0x14,0x00,0x07,0x12,0x19,0x03,0x15,0x01,0x06,0x13,0x18,0x02,0x08,0x14,0x20,0x00,0x11,0x01,0x07,0x13,0x19,0x03,0x06,0x15,0x18,0x02,0x07,0x14,0x19,0x05,0x17,0x01,0x10,0x03,0x07,0x15,0x19,0x02,0x05,0x06,0x09,0x03,0x04,0x07,0x08,0x02,0x11,0x06,0x09,0x03,0x10,0x04,0x07,0x08,0x11,0x01,0x21,0x05,0x10,0x08,0x11,0x03,0x19,0x09,0x10,0x06,0x15,0x10,0x14,0x07,0x11,0x05,0x17,0x07,0x09,0x11,0x13,0x15};
			static const unsigned J[123] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x17,0x19,0x21,0x23,0x03,0x07,0x11,0x02,0x06,0x10,0x15,0x19,0x23,0x14,0x18,0x22,0x02,0x06,0x10,0x14,0x18,0x22,0x04,0x11,0x16,0x23,0x05,0x10,0x17,0x22,0x07,0x08,0x19,0x20,0x09,0x06,0x21,0x18,0x04,0x11,0x16,0x23,0x08,0x20,0x05,0x10,0x17,0x22,0x03,0x09,0x15,0x21,0x12,0x23,0x04,0x10,0x16,0x22,0x05,0x08,0x17,0x20,0x04,0x09,0x16,0x21,0x06,0x18,0x13,0x22,0x04,0x08,0x16,0x20,0x14,0x17,0x18,0x21,0x15,0x16,0x19,0x20,0x12,0x21,0x14,0x17,0x13,0x20,0x12,0x15,0x16,0x19,0x02,0x22,0x13,0x18,0x12,0x15,0x04,0x20,0x13,0x14,0x08,0x17,0x12,0x16,0x09,0x13,0x06,0x18,0x08,0x10,0x12,0x14,0x16};
			for(size_t k=0;k<123;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 25 items
		template <typename T> static inline void on25(T *a) {
			assert(a);
			static const unsigned I[154] = {0x01,0x04,0x07,0x10,0x13,0x16,0x19,0x21,0x23,0x00,0x03,0x06,0x09,0x12,0x15,0x18,0x21,0x22,0x00,0x03,0x02,0x06,0x09,0x08,0x12,0x15,0x14,0x18,0x22,0x20,0x00,0x01,0x06,0x07,0x05,0x12,0x13,0x18,0x19,0x17,0x02,0x01,0x08,0x07,0x00,0x14,0x13,0x18,0x20,0x11,0x02,0x08,0x01,0x04,0x14,0x19,0x20,0x16,0x02,0x01,0x03,0x05,0x20,0x12,0x15,0x17,0x02,0x04,0x12,0x13,0x14,0x16,0x10,0x02,0x05,0x04,0x14,0x13,0x17,0x11,0x03,0x05,0x14,0x16,0x17,0x00,0x09,0x05,0x04,0x14,0x15,0x17,0x00,0x08,0x10,0x05,0x15,0x17,0x01,0x07,0x11,0x16,0x02,0x01,0x06,0x08,0x11,0x17,0x02,0x03,0x07,0x10,0x02,0x04,0x05,0x08,0x11,0x02,0x05,0x04,0x03,0x09,0x05,0x03,0x04,0x10,0x05,0x04,0x11,0x09,0x10,0x05,0x08,0x11,0x10,0x05,0x07,0x11,0x05,0x06,0x08,0x11,0x06,0x08,0x10,0x11,0x07,0x09,0x11,0x08,0x11,0x09,0x10,0x11};
			static const unsigned J[154] = {0x02,0x05,0x08,0x11,0x14,0x17,0x20,0x22,0x24,0x02,0x05,0x08,0x11,0x14,0x17,0x20,0x23,0x24,0x01,0x04,0x05,0x07,0x10,0x11,0x13,0x16,0x17,0x19,0x23,0x24,0x03,0x04,0x09,0x10,0x11,0x15,0x16,0x22,0x23,0x24,0x04,0x03,0x10,0x09,0x06,0x16,0x15,0x21,0x23,0x24,0x03,0x09,0x07,0x10,0x15,0x21,0x22,0x23,0x08,0x06,0x09,0x10,0x21,0x19,0x22,0x23,0x07,0x09,0x18,0x20,0x21,0x22,0x23,0x06,0x09,0x07,0x20,0x18,0x22,0x23,0x06,0x08,0x19,0x20,0x21,0x13,0x22,0x07,0x06,0x18,0x19,0x20,0x12,0x21,0x22,0x06,0x18,0x19,0x14,0x20,0x22,0x18,0x15,0x12,0x19,0x20,0x21,0x18,0x14,0x16,0x19,0x20,0x13,0x17,0x18,0x19,0x20,0x12,0x17,0x16,0x13,0x19,0x16,0x12,0x14,0x19,0x15,0x12,0x19,0x16,0x17,0x14,0x15,0x18,0x16,0x13,0x14,0x17,0x12,0x13,0x14,0x16,0x12,0x13,0x14,0x15,0x12,0x13,0x14,0x12,0x13,0x12,0x12,0x12};
			for(size_t k=0;k<154;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 26 items
		template <typename T> static inline void on26(T *a) {
			assert(a);
			static const unsigned I[163] = {0x01,0x04,0x07,0x09,0x11,0x14,0x17,0x20,0x22,0x24,0x00,0x03,0x06,0x09,0x10,0x13,0x16,0x19,0x22,0x23,0x00,0x03,0x02,0x06,0x10,0x08,0x13,0x16,0x15,0x19,0x23,0x21,0x00,0x01,0x06,0x07,0x05,0x13,0x14,0x19,0x20,0x18,0x02,0x01,0x06,0x08,0x15,0x14,0x19,0x21,0x12,0x02,0x07,0x08,0x04,0x15,0x20,0x21,0x17,0x08,0x00,0x03,0x05,0x21,0x13,0x16,0x18,0x00,0x01,0x02,0x04,0x13,0x14,0x15,0x17,0x11,0x02,0x01,0x05,0x15,0x14,0x18,0x00,0x12,0x02,0x04,0x05,0x15,0x17,0x18,0x01,0x10,0x02,0x03,0x05,0x15,0x16,0x18,0x01,0x09,0x12,0x03,0x05,0x16,0x18,0x02,0x08,0x10,0x04,0x17,0x02,0x03,0x07,0x11,0x05,0x18,0x02,0x04,0x08,0x12,0x11,0x05,0x04,0x03,0x06,0x10,0x12,0x05,0x04,0x07,0x12,0x05,0x04,0x08,0x05,0x09,0x05,0x10,0x08,0x09,0x05,0x11,0x07,0x10,0x12,0x06,0x08,0x10,0x11,0x07,0x12,0x11,0x10,0x08,0x12,0x11,0x12,0x09,0x10,0x12,0x11,0x12,0x12};
			static const unsigned J[163] = {0x02,0x05,0x08,0x10,0x12,0x15,0x18,0x21,0x23,0x25,0x02,0x05,0x08,0x11,0x12,0x15,0x18,0x21,0x24,0x25,0x01,0x04,0x05,0x07,0x11,0x12,0x14,0x17,0x18,0x20,0x24,0x25,0x03,0x04,0x10,0x11,0x12,0x16,0x17,0x23,0x24,0x25,0x04,0x03,0x09,0x11,0x17,0x16,0x22,0x24,0x25,0x03,0x09,0x10,0x11,0x16,0x22,0x23,0x24,0x09,0x07,0x10,0x11,0x22,0x20,0x23,0x24,0x06,0x08,0x09,0x10,0x19,0x21,0x22,0x23,0x24,0x08,0x06,0x10,0x21,0x19,0x23,0x13,0x24,0x07,0x08,0x09,0x20,0x21,0x22,0x14,0x23,0x06,0x07,0x08,0x19,0x20,0x21,0x13,0x22,0x23,0x06,0x07,0x19,0x20,0x15,0x21,0x22,0x06,0x19,0x14,0x16,0x20,0x22,0x06,0x19,0x13,0x17,0x20,0x22,0x21,0x18,0x16,0x13,0x19,0x20,0x21,0x17,0x14,0x19,0x20,0x16,0x13,0x19,0x15,0x19,0x14,0x19,0x15,0x16,0x13,0x19,0x14,0x17,0x19,0x13,0x14,0x16,0x18,0x13,0x18,0x16,0x14,0x13,0x17,0x15,0x16,0x13,0x13,0x15,0x13,0x14,0x13};
			for(size_t k=0;k<163;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 27 items
		template <typename T> static inline void on27(T *a) {
			assert(a);
			static const unsigned I[173] = {0x01,0x04,0x07,0x09,0x11,0x14,0x16,0x18,0x21,0x23,0x25,0x00,0x03,0x06,0x09,0x10,0x13,0x16,0x17,0x20,0x23,0x24,0x00,0x03,0x02,0x06,0x10,0x08,0x13,0x17,0x15,0x20,0x24,0x22,0x00,0x01,0x06,0x07,0x05,0x13,0x14,0x20,0x21,0x19,0x02,0x01,0x06,0x08,0x13,0x15,0x20,0x22,0x12,0x02,0x07,0x08,0x04,0x14,0x15,0x21,0x22,0x13,0x18,0x08,0x00,0x03,0x05,0x15,0x22,0x14,0x17,0x19,0x00,0x01,0x02,0x04,0x15,0x14,0x16,0x19,0x11,0x02,0x01,0x05,0x15,0x17,0x00,0x12,0x02,0x04,0x05,0x15,0x18,0x17,0x00,0x10,0x02,0x03,0x05,0x19,0x16,0x18,0x01,0x12,0x03,0x05,0x17,0x19,0x02,0x01,0x09,0x04,0x18,0x19,0x02,0x03,0x08,0x10,0x05,0x19,0x02,0x04,0x07,0x11,0x02,0x05,0x04,0x03,0x06,0x08,0x12,0x11,0x05,0x03,0x04,0x07,0x10,0x12,0x05,0x04,0x08,0x12,0x05,0x09,0x05,0x10,0x09,0x05,0x11,0x08,0x10,0x05,0x12,0x07,0x10,0x11,0x06,0x08,0x12,0x11,0x07,0x12,0x10,0x11,0x08,0x12,0x12,0x09,0x10,0x12,0x11,0x12,0x12};
			static const unsigned J[173] = {0x02,0x05,0x08,0x10,0x12,0x15,0x17,0x19,0x22,0x24,0x26,0x02,0x05,0x08,0x11,0x12,0x15,0x18,0x19,0x22,0x25,0x26,0x01,0x04,0x05,0x07,0x11,0x12,0x14,0x18,0x19,0x21,0x25,0x26,0x03,0x04,0x10,0x11,0x12,0x17,0x18,0x24,0x25,0x26,0x04,0x03,0x09,0x11,0x16,0x18,0x23,0x25,0x26,0x03,0x09,0x10,0x11,0x16,0x17,0x23,0x24,0x20,0x25,0x09,0x07,0x10,0x11,0x16,0x23,0x21,0x24,0x25,0x06,0x08,0x09,0x10,0x22,0x20,0x23,0x24,0x25,0x08,0x06,0x10,0x21,0x23,0x14,0x25,0x07,0x08,0x09,0x20,0x23,0x21,0x13,0x24,0x06,0x07,0x08,0x23,0x20,0x22,0x15,0x24,0x06,0x07,0x20,0x22,0x16,0x13,0x23,0x06,0x20,0x21,0x15,0x17,0x22,0x23,0x06,0x20,0x14,0x18,0x21,0x23,0x13,0x19,0x17,0x14,0x20,0x21,0x23,0x22,0x18,0x13,0x15,0x20,0x21,0x22,0x17,0x13,0x20,0x21,0x16,0x20,0x15,0x20,0x16,0x14,0x20,0x15,0x17,0x13,0x20,0x14,0x16,0x18,0x13,0x14,0x19,0x16,0x13,0x18,0x14,0x15,0x13,0x17,0x16,0x13,0x13,0x15,0x13,0x14,0x13};
			for(size_t k=0;k<173;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 28 items
		template <typename T> static inline void on28(T *a) {
			assert(a);
			static const unsigned I[179] = {0x01,0x03,0x05,0x08,0x10,0x12,0x15,0x17,0x19,0x22,0x24,0x26,0x00,0x03,0x04,0x07,0x10,0x11,0x14,0x17,0x18,0x21,0x24,0x25,0x00,0x04,0x02,0x07,0x11,0x09,0x14,0x18,0x16,0x21,0x25,0x23,0x00,0x01,0x07,0x08,0x06,0x14,0x15,0x21,0x22,0x20,0x00,0x02,0x07,0x09,0x14,0x16,0x21,0x23,0x13,0x01,0x02,0x08,0x09,0x00,0x05,0x15,0x16,0x22,0x23,0x14,0x19,0x02,0x09,0x01,0x04,0x06,0x16,0x23,0x15,0x18,0x20,0x00,0x02,0x01,0x03,0x06,0x16,0x15,0x17,0x20,0x12,0x02,0x04,0x16,0x18,0x01,0x11,0x13,0x02,0x05,0x04,0x16,0x19,0x18,0x01,0x13,0x06,0x03,0x05,0x20,0x17,0x19,0x02,0x04,0x06,0x18,0x20,0x02,0x03,0x10,0x05,0x06,0x19,0x20,0x02,0x04,0x09,0x11,0x06,0x20,0x04,0x05,0x03,0x08,0x12,0x06,0x05,0x04,0x07,0x09,0x13,0x12,0x06,0x04,0x05,0x08,0x11,0x13,0x06,0x05,0x09,0x13,0x06,0x10,0x06,0x11,0x10,0x06,0x12,0x09,0x11,0x06,0x13,0x08,0x11,0x12,0x07,0x09,0x13,0x12,0x08,0x13,0x11,0x12,0x09,0x13,0x13,0x10,0x11,0x13,0x12,0x13,0x13};
			static const unsigned J[179] = {0x02,0x04,0x06,0x09,0x11,0x13,0x16,0x18,0x20,0x23,0x25,0x27,0x02,0x05,0x06,0x09,0x12,0x13,0x16,0x19,0x20,0x23,0x26,0x27,0x01,0x05,0x06,0x08,0x12,0x13,0x15,0x19,0x20,0x22,0x26,0x27,0x04,0x05,0x11,0x12,0x13,0x18,0x19,0x25,0x26,0x27,0x03,0x05,0x10,0x12,0x17,0x19,0x24,0x26,0x27,0x03,0x04,0x10,0x11,0x07,0x12,0x17,0x18,0x24,0x25,0x21,0x26,0x03,0x10,0x08,0x11,0x12,0x17,0x24,0x22,0x25,0x26,0x14,0x09,0x07,0x10,0x11,0x23,0x21,0x24,0x25,0x26,0x08,0x10,0x22,0x24,0x15,0x25,0x26,0x07,0x10,0x08,0x21,0x24,0x22,0x14,0x25,0x10,0x07,0x09,0x24,0x21,0x23,0x16,0x07,0x09,0x21,0x23,0x15,0x17,0x24,0x07,0x08,0x21,0x22,0x14,0x18,0x23,0x24,0x07,0x21,0x17,0x19,0x14,0x22,0x24,0x20,0x17,0x15,0x21,0x22,0x24,0x23,0x19,0x14,0x16,0x21,0x22,0x23,0x18,0x14,0x21,0x22,0x17,0x21,0x16,0x21,0x17,0x15,0x21,0x16,0x18,0x14,0x21,0x15,0x17,0x19,0x14,0x15,0x20,0x17,0x14,0x19,0x15,0x16,0x14,0x18,0x17,0x14,0x14,0x16,0x14,0x15,0x14};
			for(size_t k=0;k<179;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 29 items
		template <typename T> static inline void on29(T *a) {
			assert(a);
			static const unsigned I[191] = {0x01,0x03,0x05,0x08,0x10,0x12,0x15,0x17,0x19,0x21,0x23,0x25,0x27,0x00,0x03,0x04,0x07,0x10,0x11,0x14,0x17,0x18,0x21,0x22,0x25,0x26,0x00,0x04,0x02,0x07,0x11,0x09,0x14,0x18,0x16,0x22,0x26,0x21,0x24,0x00,0x01,0x07,0x08,0x06,0x14,0x15,0x22,0x23,0x20,0x00,0x02,0x07,0x09,0x14,0x16,0x22,0x24,0x13,0x01,0x02,0x08,0x09,0x00,0x05,0x15,0x16,0x23,0x24,0x14,0x19,0x02,0x09,0x01,0x04,0x06,0x16,0x24,0x14,0x15,0x18,0x20,0x02,0x01,0x03,0x06,0x16,0x15,0x17,0x20,0x12,0x02,0x04,0x16,0x18,0x00,0x11,0x13,0x02,0x05,0x04,0x16,0x19,0x00,0x13,0x06,0x03,0x05,0x16,0x20,0x18,0x19,0x04,0x06,0x17,0x20,0x01,0x10,0x05,0x06,0x18,0x20,0x02,0x01,0x09,0x11,0x06,0x19,0x20,0x02,0x03,0x08,0x12,0x20,0x02,0x04,0x07,0x09,0x13,0x12,0x02,0x04,0x05,0x06,0x08,0x11,0x13,0x06,0x05,0x03,0x04,0x09,0x13,0x06,0x04,0x05,0x10,0x06,0x05,0x11,0x06,0x12,0x10,0x11,0x06,0x13,0x09,0x11,0x12,0x06,0x08,0x13,0x12,0x06,0x07,0x09,0x13,0x07,0x09,0x13,0x12,0x08,0x13,0x11,0x09,0x13,0x10,0x13,0x11,0x13,0x12,0x13};
			static const unsigned J[191] = {0x02,0x04,0x06,0x09,0x11,0x13,0x16,0x18,0x20,0x22,0x24,0x26,0x28,0x02,0x05,0x06,0x09,0x12,0x13,0x16,0x19,0x20,0x23,0x24,0x27,0x28,0x01,0x05,0x06,0x08,0x12,0x13,0x15,0x19,0x20,0x23,0x27,0x25,0x28,0x04,0x05,0x11,0x12,0x13,0x18,0x19,0x26,0x27,0x28,0x03,0x05,0x10,0x12,0x17,0x19,0x25,0x27,0x28,0x03,0x04,0x10,0x11,0x07,0x12,0x17,0x18,0x25,0x26,0x22,0x27,0x03,0x10,0x08,0x11,0x12,0x17,0x25,0x21,0x23,0x26,0x27,0x09,0x07,0x10,0x11,0x24,0x21,0x25,0x26,0x27,0x08,0x10,0x23,0x25,0x15,0x26,0x27,0x07,0x10,0x08,0x22,0x25,0x14,0x26,0x10,0x07,0x09,0x21,0x25,0x22,0x23,0x07,0x09,0x21,0x24,0x16,0x25,0x07,0x08,0x21,0x23,0x17,0x14,0x24,0x25,0x07,0x21,0x22,0x16,0x18,0x23,0x25,0x21,0x15,0x19,0x22,0x23,0x25,0x24,0x14,0x18,0x20,0x21,0x22,0x23,0x24,0x20,0x18,0x14,0x15,0x22,0x23,0x19,0x14,0x16,0x22,0x18,0x14,0x22,0x17,0x22,0x18,0x19,0x16,0x22,0x17,0x18,0x20,0x15,0x16,0x21,0x18,0x14,0x15,0x16,0x20,0x14,0x15,0x19,0x16,0x14,0x18,0x15,0x14,0x17,0x14,0x16,0x14,0x15,0x14,0x14};
			for(size_t k=0;k<191;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 30 items
		template <typename T> static inline void on30(T *a) {
			assert(a);
			static const unsigned I[198] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x16,0x18,0x20,0x22,0x24,0x26,0x28,0x00,0x03,0x04,0x07,0x08,0x11,0x12,0x15,0x18,0x19,0x22,0x23,0x26,0x27,0x00,0x04,0x02,0x08,0x12,0x07,0x10,0x15,0x19,0x17,0x23,0x27,0x22,0x25,0x00,0x01,0x08,0x09,0x06,0x15,0x16,0x23,0x24,0x21,0x00,0x02,0x08,0x10,0x15,0x17,0x23,0x25,0x14,0x01,0x02,0x09,0x10,0x00,0x05,0x16,0x17,0x24,0x25,0x15,0x20,0x02,0x10,0x00,0x01,0x04,0x06,0x17,0x25,0x15,0x16,0x19,0x21,0x02,0x01,0x03,0x06,0x17,0x16,0x18,0x21,0x00,0x13,0x02,0x04,0x17,0x19,0x01,0x12,0x14,0x02,0x05,0x17,0x20,0x01,0x14,0x02,0x06,0x04,0x05,0x17,0x21,0x19,0x20,0x03,0x06,0x18,0x21,0x02,0x11,0x04,0x06,0x19,0x21,0x02,0x03,0x10,0x12,0x05,0x06,0x20,0x21,0x02,0x04,0x09,0x13,0x06,0x21,0x04,0x05,0x03,0x08,0x10,0x14,0x06,0x05,0x04,0x07,0x10,0x13,0x14,0x06,0x04,0x05,0x08,0x12,0x14,0x06,0x05,0x09,0x14,0x06,0x10,0x06,0x11,0x10,0x06,0x12,0x09,0x11,0x06,0x13,0x08,0x10,0x12,0x14,0x07,0x10,0x12,0x13,0x08,0x14,0x13,0x12,0x09,0x14,0x13,0x10,0x14,0x11,0x14,0x12,0x14,0x13,0x14,0x14};
			static const unsigned J[198] = {0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x17,0x19,0x21,0x23,0x25,0x27,0x29,0x02,0x05,0x06,0x09,0x10,0x13,0x14,0x17,0x20,0x21,0x24,0x25,0x28,0x29,0x01,0x05,0x06,0x09,0x13,0x11,0x14,0x16,0x20,0x21,0x24,0x28,0x26,0x29,0x04,0x05,0x12,0x13,0x14,0x19,0x20,0x27,0x28,0x29,0x03,0x05,0x11,0x13,0x18,0x20,0x26,0x28,0x29,0x03,0x04,0x11,0x12,0x08,0x13,0x18,0x19,0x26,0x27,0x23,0x28,0x03,0x11,0x07,0x09,0x12,0x13,0x18,0x26,0x22,0x24,0x27,0x28,0x10,0x07,0x11,0x12,0x25,0x22,0x26,0x27,0x15,0x28,0x09,0x11,0x24,0x26,0x16,0x27,0x28,0x08,0x11,0x23,0x26,0x15,0x27,0x07,0x11,0x08,0x09,0x22,0x26,0x23,0x24,0x07,0x10,0x22,0x25,0x17,0x26,0x07,0x09,0x22,0x24,0x16,0x18,0x25,0x26,0x07,0x08,0x22,0x23,0x15,0x19,0x24,0x26,0x07,0x22,0x18,0x20,0x15,0x23,0x24,0x26,0x21,0x18,0x16,0x22,0x23,0x24,0x25,0x20,0x15,0x17,0x22,0x23,0x24,0x19,0x15,0x22,0x23,0x18,0x22,0x17,0x22,0x18,0x16,0x22,0x17,0x19,0x15,0x22,0x16,0x17,0x20,0x22,0x15,0x16,0x19,0x21,0x15,0x21,0x19,0x16,0x15,0x20,0x17,0x15,0x19,0x15,0x18,0x15,0x17,0x15,0x16,0x15};
			for(size_t k=0;k<198;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 31 items
		template <typename T> static inline void on31(T *a) {
			assert(a);
			static const unsigned I[206] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x17,0x19,0x21,0x23,0x25,0x27,0x29,0x00,0x03,0x04,0x07,0x08,0x11,0x12,0x15,0x16,0x19,0x20,0x23,0x24,0x27,0x28,0x00,0x04,0x02,0x08,0x12,0x07,0x10,0x16,0x20,0x15,0x18,0x24,0x28,0x23,0x26,0x00,0x01,0x08,0x09,0x06,0x16,0x17,0x24,0x25,0x15,0x22,0x00,0x02,0x08,0x10,0x16,0x18,0x24,0x26,0x14,0x01,0x02,0x09,0x10,0x00,0x05,0x17,0x18,0x25,0x26,0x16,0x21,0x02,0x10,0x00,0x01,0x04,0x06,0x18,0x26,0x16,0x17,0x20,0x22,0x02,0x01,0x03,0x06,0x18,0x17,0x19,0x22,0x00,0x13,0x02,0x04,0x18,0x20,0x00,0x01,0x12,0x14,0x02,0x05,0x18,0x21,0x01,0x14,0x02,0x06,0x04,0x05,0x18,0x22,0x20,0x21,0x03,0x06,0x19,0x22,0x02,0x11,0x04,0x06,0x20,0x22,0x02,0x03,0x10,0x12,0x05,0x06,0x21,0x22,0x02,0x04,0x09,0x13,0x06,0x22,0x02,0x04,0x05,0x08,0x10,0x14,0x06,0x05,0x03,0x04,0x07,0x10,0x13,0x14,0x06,0x04,0x05,0x08,0x12,0x14,0x06,0x05,0x09,0x14,0x06,0x10,0x06,0x11,0x06,0x12,0x10,0x11,0x06,0x13,0x09,0x12,0x06,0x14,0x08,0x10,0x12,0x13,0x07,0x10,0x14,0x13,0x08,0x14,0x12,0x13,0x09,0x14,0x10,0x14,0x11,0x14,0x12,0x14,0x13,0x14,0x14};
			static const unsigned J[206] = {0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16,0x18,0x20,0x22,0x24,0x26,0x28,0x30,0x02,0x05,0x06,0x09,0x10,0x13,0x14,0x17,0x18,0x21,0x22,0x25,0x26,0x29,0x30,0x01,0x05,0x06,0x09,0x13,0x11,0x14,0x17,0x21,0x19,0x22,0x25,0x29,0x27,0x30,0x04,0x05,0x12,0x13,0x14,0x20,0x21,0x28,0x29,0x23,0x30,0x03,0x05,0x11,0x13,0x19,0x21,0x27,0x29,0x30,0x03,0x04,0x11,0x12,0x08,0x13,0x19,0x20,0x27,0x28,0x24,0x29,0x03,0x11,0x07,0x09,0x12,0x13,0x19,0x27,0x23,0x25,0x28,0x29,0x10,0x07,0x11,0x12,0x26,0x23,0x27,0x28,0x16,0x29,0x09,0x11,0x25,0x27,0x15,0x17,0x28,0x29,0x08,0x11,0x24,0x27,0x15,0x28,0x07,0x11,0x08,0x09,0x23,0x27,0x24,0x25,0x07,0x10,0x23,0x26,0x18,0x27,0x07,0x09,0x23,0x25,0x17,0x19,0x26,0x27,0x07,0x08,0x23,0x24,0x16,0x20,0x25,0x27,0x07,0x23,0x15,0x19,0x21,0x24,0x25,0x27,0x22,0x19,0x15,0x16,0x23,0x24,0x25,0x26,0x21,0x15,0x17,0x23,0x24,0x25,0x20,0x15,0x23,0x24,0x19,0x23,0x18,0x23,0x17,0x23,0x18,0x19,0x16,0x23,0x17,0x20,0x15,0x23,0x16,0x17,0x19,0x21,0x15,0x16,0x22,0x19,0x15,0x21,0x16,0x17,0x15,0x20,0x15,0x19,0x15,0x18,0x15,0x17,0x15,0x16,0x15};
			for(size_t k=0;k<206;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 32 items
		template <typename T> static inline void on32(T *a) {
			assert(a);
			static const unsigned I[211] = {0x00,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16,0x18,0x20,0x22,0x24,0x26,0x28,0x30,0x00,0x01,0x04,0x05,0x08,0x09,0x12,0x13,0x16,0x17,0x20,0x21,0x24,0x25,0x28,0x29,0x01,0x05,0x00,0x03,0x09,0x13,0x08,0x11,0x17,0x21,0x16,0x19,0x25,0x29,0x24,0x27,0x01,0x02,0x09,0x10,0x00,0x07,0x17,0x18,0x25,0x26,0x16,0x23,0x01,0x03,0x09,0x11,0x17,0x19,0x25,0x27,0x00,0x15,0x02,0x03,0x10,0x11,0x01,0x06,0x18,0x19,0x26,0x27,0x17,0x22,0x03,0x11,0x01,0x02,0x05,0x07,0x19,0x27,0x17,0x18,0x21,0x23,0x03,0x02,0x04,0x07,0x19,0x18,0x20,0x23,0x01,0x14,0x03,0x05,0x19,0x21,0x01,0x02,0x13,0x15,0x03,0x06,0x19,0x22,0x02,0x15,0x03,0x07,0x05,0x06,0x19,0x23,0x21,0x22,0x04,0x07,0x20,0x23,0x03,0x12,0x05,0x07,0x21,0x23,0x03,0x04,0x11,0x13,0x06,0x07,0x22,0x23,0x03,0x05,0x10,0x14,0x07,0x23,0x03,0x05,0x06,0x09,0x11,0x15,0x07,0x06,0x04,0x05,0x08,0x11,0x14,0x15,0x07,0x05,0x06,0x09,0x13,0x15,0x07,0x06,0x10,0x15,0x07,0x11,0x07,0x12,0x07,0x13,0x11,0x12,0x07,0x14,0x10,0x13,0x07,0x15,0x09,0x11,0x13,0x14,0x08,0x11,0x15,0x14,0x09,0x15,0x13,0x14,0x10,0x15,0x11,0x15,0x12,0x15,0x13,0x15,0x14,0x15,0x15};
			static const unsigned J[211] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x17,0x19,0x21,0x23,0x25,0x27,0x29,0x31,0x02,0x03,0x06,0x07,0x10,0x11,0x14,0x15,0x18,0x19,0x22,0x23,0x26,0x27,0x30,0x31,0x02,0x06,0x04,0x07,0x10,0x14,0x12,0x15,0x18,0x22,0x20,0x23,0x26,0x30,0x28,0x31,0x05,0x06,0x13,0x14,0x08,0x15,0x21,0x22,0x29,0x30,0x24,0x31,0x04,0x06,0x12,0x14,0x20,0x22,0x28,0x30,0x16,0x31,0x04,0x05,0x12,0x13,0x09,0x14,0x20,0x21,0x28,0x29,0x25,0x30,0x04,0x12,0x08,0x10,0x13,0x14,0x20,0x28,0x24,0x26,0x29,0x30,0x11,0x08,0x12,0x13,0x27,0x24,0x28,0x29,0x17,0x30,0x10,0x12,0x26,0x28,0x16,0x18,0x29,0x30,0x09,0x12,0x25,0x28,0x16,0x29,0x08,0x12,0x09,0x10,0x24,0x28,0x25,0x26,0x08,0x11,0x24,0x27,0x19,0x28,0x08,0x10,0x24,0x26,0x18,0x20,0x27,0x28,0x08,0x09,0x24,0x25,0x17,0x21,0x26,0x28,0x08,0x24,0x16,0x20,0x22,0x25,0x26,0x28,0x23,0x20,0x16,0x17,0x24,0x25,0x26,0x27,0x22,0x16,0x18,0x24,0x25,0x26,0x21,0x16,0x24,0x25,0x20,0x24,0x19,0x24,0x18,0x24,0x19,0x20,0x17,0x24,0x18,0x21,0x16,0x24,0x17,0x18,0x20,0x22,0x16,0x17,0x23,0x20,0x16,0x22,0x17,0x18,0x16,0x21,0x16,0x20,0x16,0x19,0x16,0x18,0x16,0x17,0x16};
			for(size_t k=0;k<211;++k) { Y_NWSRT_SWAP(I[k],J[k]); }
		}
		//!built-in version on 0-32 items
		template <typename T> static inline void on(T *a, const size_t n) {
			switch(n) {
				case  2: on2(a);  break;
				case  3: on3(a);  break;
				case  4: on4(a);  break;
				case  5: on5(a);  break;
				case  6: on6(a);  break;
				case  7: on7(a);  break;
				case  8: on8(a);  break;
				case  9: on9(a);  break;
				case 10: on10(a); break;
				case 11: on11(a); break;
				case 12: on12(a); break;
				case 13: on13(a); break;
				case 14: on14(a); break;
				case 15: on15(a); break;
				case 16: on16(a); break;
				case 17: on17(a); break;
				case 18: on18(a); break;
				case 19: on19(a); break;
				case 20: on20(a); break;
				case 21: on21(a); break;
				case 22: on22(a); break;
				case 23: on23(a); break;
				case 24: on24(a); break;
				case 25: on25(a); break;
				case 26: on26(a); break;
				case 27: on27(a); break;
				case 28: on28(a); break;
				case 29: on29(a); break;
				case 30: on30(a); break;
				case 31: on31(a); break;
				case 32: on32(a); break;
				default: break;
			}
		}
		//!built-in version on 2 items
		template <typename T,typename U> static inline void on2(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[1] = {0x00};
			static const unsigned J[1] = {0x01};
			for(size_t k=0;k<1;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 3 items
		template <typename T,typename U> static inline void on3(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[3] = {0x01,0x00,0x00};
			static const unsigned J[3] = {0x02,0x02,0x01};
			for(size_t k=0;k<3;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 4 items
		template <typename T,typename U> static inline void on4(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[5] = {0x00,0x02,0x00,0x01,0x01};
			static const unsigned J[5] = {0x01,0x03,0x02,0x03,0x02};
			for(size_t k=0;k<5;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 5 items
		template <typename T,typename U> static inline void on5(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[9] = {0x00,0x03,0x02,0x02,0x01,0x00,0x00,0x01,0x01};
			static const unsigned J[9] = {0x01,0x04,0x04,0x03,0x04,0x03,0x02,0x03,0x02};
			for(size_t k=0;k<9;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 6 items
		template <typename T,typename U> static inline void on6(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[12] = {0x01,0x04,0x00,0x03,0x00,0x03,0x02,0x00,0x01,0x02,0x01,0x02};
			static const unsigned J[12] = {0x02,0x05,0x02,0x05,0x01,0x04,0x05,0x03,0x04,0x04,0x03,0x03};
			for(size_t k=0;k<12;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 7 items
		template <typename T,typename U> static inline void on7(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[16] = {0x01,0x03,0x05,0x00,0x03,0x04,0x00,0x04,0x02,0x00,0x01,0x00,0x02,0x01,0x02,0x02};
			static const unsigned J[16] = {0x02,0x04,0x06,0x02,0x05,0x06,0x01,0x05,0x06,0x04,0x05,0x03,0x05,0x03,0x04,0x03};
			for(size_t k=0;k<16;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 8 items
		template <typename T,typename U> static inline void on8(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[19] = {0x00,0x02,0x04,0x06,0x00,0x01,0x04,0x05,0x01,0x05,0x00,0x03,0x01,0x02,0x01,0x03,0x02,0x03,0x03};
			static const unsigned J[19] = {0x01,0x03,0x05,0x07,0x02,0x03,0x06,0x07,0x02,0x06,0x04,0x07,0x05,0x06,0x04,0x06,0x04,0x05,0x04};
			for(size_t k=0;k<19;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 9 items
		template <typename T,typename U> static inline void on9(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[25] = {0x02,0x00,0x01,0x07,0x00,0x01,0x03,0x04,0x05,0x01,0x02,0x06,0x00,0x04,0x03,0x03,0x05,0x01,0x01,0x06,0x04,0x02,0x05,0x02,0x04};
			static const unsigned J[25] = {0x06,0x05,0x04,0x08,0x07,0x02,0x05,0x06,0x08,0x03,0x07,0x08,0x01,0x05,0x07,0x04,0x06,0x02,0x03,0x07,0x05,0x04,0x06,0x03,0x05};
			for(size_t k=0;k<25;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 10 items
		template <typename T,typename U> static inline void on10(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[29] = {0x01,0x07,0x02,0x05,0x00,0x02,0x00,0x08,0x03,0x04,0x00,0x03,0x00,0x06,0x04,0x01,0x03,0x05,0x06,0x01,0x07,0x01,0x02,0x04,0x02,0x06,0x04,0x03,0x05};
			static const unsigned J[29] = {0x04,0x08,0x03,0x06,0x09,0x05,0x07,0x09,0x06,0x09,0x01,0x05,0x02,0x09,0x07,0x08,0x04,0x08,0x07,0x02,0x08,0x03,0x05,0x06,0x03,0x07,0x05,0x04,0x06};
			for(size_t k=0;k<29;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 11 items
		template <typename T,typename U> static inline void on11(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[35] = {0x00,0x02,0x04,0x06,0x08,0x01,0x05,0x00,0x04,0x08,0x01,0x05,0x09,0x00,0x03,0x01,0x06,0x04,0x05,0x02,0x00,0x03,0x01,0x06,0x02,0x08,0x01,0x07,0x03,0x06,0x02,0x07,0x05,0x03,0x07};
			static const unsigned J[35] = {0x01,0x03,0x05,0x07,0x09,0x03,0x07,0x02,0x06,0x10,0x02,0x06,0x10,0x04,0x07,0x05,0x10,0x08,0x09,0x06,0x04,0x08,0x05,0x10,0x03,0x09,0x04,0x10,0x05,0x08,0x04,0x09,0x06,0x04,0x08};
			for(size_t k=0;k<35;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 12 items
		template <typename T,typename U> static inline void on12(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[39] = {0x00,0x02,0x04,0x03,0x08,0x01,0x05,0x01,0x00,0x02,0x09,0x07,0x07,0x10,0x01,0x04,0x06,0x00,0x05,0x03,0x01,0x02,0x07,0x06,0x02,0x04,0x08,0x05,0x01,0x09,0x06,0x03,0x08,0x02,0x04,0x06,0x07,0x05,0x03};
			static const unsigned J[39] = {0x05,0x07,0x10,0x06,0x11,0x09,0x06,0x08,0x03,0x04,0x11,0x10,0x09,0x11,0x02,0x08,0x11,0x01,0x08,0x07,0x04,0x05,0x10,0x09,0x03,0x06,0x10,0x07,0x02,0x10,0x08,0x04,0x09,0x03,0x05,0x07,0x08,0x06,0x04};
			for(size_t k=0;k<39;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 13 items
		template <typename T,typename U> static inline void on13(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[45] = {0x04,0x00,0x03,0x02,0x06,0x01,0x00,0x02,0x05,0x07,0x01,0x10,0x09,0x00,0x08,0x03,0x08,0x11,0x07,0x04,0x02,0x05,0x04,0x10,0x00,0x03,0x01,0x06,0x03,0x01,0x09,0x06,0x05,0x01,0x02,0x09,0x06,0x02,0x05,0x07,0x03,0x08,0x06,0x04,0x05};
			static const unsigned J[45] = {0x08,0x09,0x07,0x05,0x11,0x12,0x06,0x04,0x08,0x12,0x03,0x11,0x11,0x01,0x12,0x06,0x10,0x12,0x09,0x06,0x08,0x09,0x07,0x11,0x02,0x05,0x08,0x09,0x04,0x02,0x11,0x10,0x07,0x03,0x04,0x10,0x08,0x03,0x06,0x08,0x05,0x09,0x07,0x05,0x06};
			for(size_t k=0;k<45;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 14 items
		template <typename T,typename U> static inline void on14(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[51] = {0x00,0x02,0x08,0x04,0x01,0x07,0x09,0x03,0x04,0x05,0x01,0x10,0x00,0x11,0x00,0x01,0x06,0x02,0x03,0x12,0x00,0x09,0x03,0x06,0x07,0x05,0x02,0x04,0x01,0x08,0x10,0x02,0x03,0x05,0x11,0x01,0x08,0x03,0x06,0x02,0x10,0x07,0x05,0x04,0x08,0x06,0x09,0x03,0x05,0x07,0x06};
			static const unsigned J[51] = {0x06,0x03,0x12,0x05,0x10,0x13,0x11,0x06,0x07,0x13,0x08,0x12,0x02,0x12,0x09,0x04,0x13,0x07,0x05,0x13,0x01,0x10,0x08,0x11,0x10,0x08,0x09,0x06,0x03,0x12,0x11,0x04,0x09,0x07,0x12,0x02,0x10,0x04,0x09,0x03,0x11,0x08,0x06,0x05,0x09,0x07,0x10,0x04,0x06,0x08,0x07};
			for(size_t k=0;k<51;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 15 items
		template <typename T,typename U> static inline void on15(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[56] = {0x12,0x05,0x03,0x02,0x04,0x06,0x01,0x11,0x01,0x07,0x00,0x04,0x02,0x08,0x00,0x09,0x01,0x05,0x07,0x11,0x03,0x00,0x05,0x09,0x08,0x02,0x06,0x03,0x02,0x12,0x10,0x01,0x08,0x04,0x06,0x13,0x01,0x03,0x10,0x04,0x07,0x12,0x02,0x10,0x05,0x04,0x09,0x06,0x07,0x11,0x03,0x09,0x05,0x07,0x08,0x06};
			static const unsigned J[56] = {0x13,0x07,0x11,0x10,0x09,0x08,0x14,0x14,0x03,0x10,0x12,0x06,0x05,0x09,0x02,0x14,0x04,0x06,0x08,0x13,0x12,0x01,0x11,0x10,0x12,0x04,0x13,0x07,0x03,0x14,0x13,0x05,0x11,0x09,0x07,0x14,0x02,0x05,0x12,0x08,0x09,0x13,0x03,0x11,0x06,0x05,0x11,0x08,0x10,0x12,0x04,0x10,0x06,0x08,0x09,0x07};
			for(size_t k=0;k<56;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 16 items
		template <typename T,typename U> static inline void on16(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[61] = {0x00,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x01,0x05,0x09,0x13,0x00,0x04,0x08,0x12,0x03,0x11,0x02,0x10,0x01,0x09,0x00,0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,0x01,0x03,0x13,0x04,0x07,0x05,0x06,0x02,0x07,0x03,0x05,0x01,0x06,0x11,0x02,0x06,0x10,0x03,0x07,0x11,0x03,0x07,0x05,0x09,0x03,0x05,0x07,0x09,0x11};
			static const unsigned J[61] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x03,0x07,0x11,0x15,0x02,0x06,0x10,0x14,0x07,0x15,0x06,0x14,0x05,0x13,0x04,0x12,0x15,0x14,0x13,0x12,0x11,0x10,0x09,0x08,0x02,0x12,0x14,0x08,0x11,0x10,0x09,0x08,0x13,0x09,0x12,0x04,0x10,0x14,0x04,0x08,0x12,0x05,0x09,0x13,0x06,0x10,0x08,0x12,0x04,0x06,0x08,0x10,0x12};
			for(size_t k=0;k<61;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 17 items
		template <typename T,typename U> static inline void on17(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[71] = {0x05,0x04,0x07,0x00,0x02,0x01,0x03,0x06,0x03,0x08,0x04,0x09,0x00,0x14,0x01,0x10,0x03,0x11,0x00,0x12,0x02,0x07,0x01,0x13,0x05,0x06,0x00,0x15,0x05,0x06,0x02,0x09,0x12,0x08,0x04,0x07,0x11,0x01,0x08,0x04,0x06,0x10,0x01,0x02,0x09,0x06,0x14,0x01,0x03,0x13,0x11,0x02,0x03,0x10,0x13,0x03,0x10,0x07,0x03,0x12,0x05,0x08,0x11,0x04,0x06,0x09,0x05,0x06,0x09,0x08,0x07};
			static const unsigned J[71] = {0x11,0x09,0x12,0x14,0x16,0x15,0x08,0x13,0x10,0x13,0x07,0x12,0x02,0x16,0x06,0x15,0x05,0x13,0x04,0x16,0x09,0x14,0x03,0x15,0x10,0x11,0x01,0x16,0x07,0x08,0x03,0x11,0x13,0x10,0x06,0x09,0x13,0x02,0x14,0x05,0x12,0x14,0x08,0x05,0x12,0x07,0x15,0x04,0x10,0x15,0x14,0x04,0x08,0x12,0x14,0x06,0x11,0x08,0x04,0x13,0x06,0x09,0x12,0x05,0x08,0x11,0x07,0x07,0x10,0x09,0x08};
			for(size_t k=0;k<71;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 18 items
		template <typename T,typename U> static inline void on18(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[84] = {0x00,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16,0x00,0x01,0x04,0x05,0x08,0x09,0x12,0x13,0x15,0x00,0x01,0x02,0x03,0x09,0x08,0x11,0x13,0x14,0x07,0x06,0x03,0x10,0x11,0x09,0x02,0x01,0x00,0x16,0x07,0x05,0x03,0x06,0x04,0x02,0x08,0x00,0x01,0x14,0x06,0x07,0x05,0x03,0x04,0x04,0x14,0x05,0x07,0x01,0x12,0x03,0x10,0x05,0x11,0x02,0x12,0x06,0x09,0x07,0x03,0x12,0x02,0x13,0x06,0x10,0x13,0x11,0x09,0x07,0x05,0x03,0x12,0x10,0x08,0x06,0x04};
			static const unsigned J[84] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x17,0x02,0x03,0x06,0x07,0x10,0x11,0x17,0x14,0x16,0x04,0x05,0x06,0x07,0x10,0x12,0x16,0x15,0x17,0x16,0x17,0x05,0x14,0x12,0x15,0x04,0x13,0x08,0x17,0x14,0x12,0x15,0x13,0x10,0x11,0x09,0x01,0x08,0x16,0x09,0x13,0x11,0x10,0x15,0x08,0x15,0x09,0x11,0x02,0x16,0x06,0x13,0x08,0x14,0x03,0x13,0x07,0x10,0x09,0x05,0x14,0x04,0x15,0x08,0x11,0x14,0x12,0x10,0x08,0x06,0x04,0x13,0x11,0x09,0x07,0x05};
			for(size_t k=0;k<84;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 19 items
		template <typename T,typename U> static inline void on19(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[86] = {0x04,0x03,0x00,0x07,0x08,0x06,0x15,0x01,0x09,0x02,0x11,0x07,0x06,0x10,0x03,0x13,0x00,0x14,0x01,0x05,0x03,0x17,0x04,0x09,0x13,0x01,0x12,0x02,0x07,0x05,0x00,0x16,0x06,0x02,0x11,0x12,0x00,0x01,0x08,0x04,0x15,0x11,0x10,0x03,0x01,0x05,0x06,0x08,0x14,0x01,0x05,0x10,0x02,0x07,0x09,0x08,0x16,0x14,0x02,0x09,0x04,0x07,0x15,0x02,0x13,0x05,0x06,0x12,0x03,0x10,0x04,0x06,0x14,0x04,0x07,0x11,0x09,0x13,0x06,0x10,0x08,0x12,0x05,0x07,0x09,0x11};
			static const unsigned J[86] = {0x10,0x12,0x16,0x14,0x11,0x13,0x17,0x05,0x18,0x05,0x16,0x09,0x15,0x12,0x04,0x17,0x08,0x18,0x02,0x16,0x07,0x18,0x15,0x10,0x14,0x06,0x16,0x11,0x13,0x10,0x01,0x18,0x08,0x09,0x15,0x17,0x03,0x07,0x14,0x06,0x16,0x12,0x14,0x04,0x02,0x07,0x13,0x09,0x17,0x03,0x06,0x15,0x04,0x13,0x12,0x11,0x17,0x15,0x05,0x10,0x06,0x11,0x16,0x03,0x14,0x08,0x11,0x14,0x05,0x13,0x08,0x09,0x15,0x05,0x08,0x12,0x10,0x14,0x07,0x11,0x09,0x13,0x06,0x08,0x10,0x12};
			for(size_t k=0;k<86;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 20 items
		template <typename T,typename U> static inline void on20(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[102] = {0x00,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16,0x18,0x01,0x05,0x09,0x13,0x17,0x00,0x04,0x08,0x12,0x16,0x03,0x09,0x15,0x02,0x14,0x01,0x13,0x00,0x12,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,0x02,0x03,0x11,0x17,0x01,0x05,0x09,0x10,0x06,0x00,0x01,0x02,0x07,0x16,0x03,0x08,0x05,0x10,0x12,0x01,0x04,0x09,0x13,0x17,0x00,0x07,0x08,0x06,0x00,0x03,0x07,0x14,0x18,0x02,0x05,0x11,0x15,0x08,0x02,0x04,0x09,0x12,0x16,0x01,0x05,0x07,0x13,0x01,0x04,0x07,0x10,0x12,0x14,0x16,0x18,0x00,0x06,0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15};
			static const unsigned J[102] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x17,0x19,0x03,0x07,0x11,0x15,0x19,0x02,0x06,0x10,0x14,0x18,0x07,0x10,0x19,0x06,0x18,0x05,0x17,0x04,0x16,0x19,0x18,0x17,0x16,0x15,0x14,0x13,0x12,0x19,0x08,0x16,0x18,0x04,0x15,0x14,0x13,0x12,0x19,0x18,0x06,0x15,0x17,0x04,0x14,0x09,0x11,0x13,0x03,0x05,0x12,0x16,0x18,0x15,0x14,0x11,0x10,0x01,0x06,0x13,0x17,0x19,0x04,0x10,0x12,0x16,0x09,0x03,0x08,0x11,0x15,0x18,0x17,0x06,0x10,0x14,0x03,0x05,0x09,0x11,0x13,0x15,0x17,0x19,0x02,0x08,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16};
			for(size_t k=0;k<102;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 21 items
		template <typename T,typename U> static inline void on21(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[102] = {0x05,0x11,0x01,0x02,0x06,0x00,0x03,0x04,0x12,0x07,0x01,0x13,0x02,0x09,0x04,0x08,0x03,0x15,0x00,0x10,0x00,0x02,0x17,0x01,0x16,0x07,0x12,0x14,0x00,0x09,0x04,0x05,0x16,0x19,0x00,0x14,0x10,0x05,0x06,0x01,0x04,0x18,0x08,0x07,0x17,0x01,0x06,0x03,0x05,0x13,0x11,0x09,0x08,0x18,0x04,0x13,0x02,0x10,0x12,0x03,0x06,0x01,0x15,0x11,0x14,0x08,0x03,0x04,0x15,0x11,0x17,0x02,0x15,0x10,0x04,0x16,0x13,0x09,0x03,0x05,0x15,0x08,0x11,0x06,0x04,0x12,0x08,0x06,0x14,0x12,0x07,0x10,0x05,0x13,0x07,0x11,0x06,0x09,0x07,0x09,0x09,0x09};
			static const unsigned J[102] = {0x09,0x15,0x19,0x14,0x18,0x17,0x20,0x08,0x16,0x13,0x07,0x19,0x11,0x18,0x12,0x16,0x05,0x17,0x10,0x20,0x06,0x03,0x18,0x04,0x19,0x08,0x13,0x20,0x01,0x10,0x11,0x06,0x17,0x20,0x02,0x15,0x11,0x12,0x13,0x03,0x09,0x20,0x15,0x14,0x19,0x02,0x10,0x12,0x07,0x15,0x18,0x14,0x16,0x19,0x05,0x17,0x07,0x14,0x16,0x08,0x09,0x04,0x19,0x17,0x16,0x12,0x06,0x05,0x18,0x13,0x18,0x04,0x16,0x11,0x05,0x17,0x15,0x11,0x04,0x07,0x16,0x09,0x12,0x07,0x05,0x14,0x10,0x08,0x15,0x13,0x09,0x11,0x06,0x14,0x10,0x12,0x08,0x13,0x08,0x12,0x11,0x10};
			for(size_t k=0;k<102;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 22 items
		template <typename T,typename U> static inline void on22(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[108] = {0x10,0x02,0x13,0x03,0x06,0x01,0x05,0x00,0x04,0x07,0x12,0x00,0x17,0x03,0x09,0x01,0x19,0x07,0x08,0x05,0x15,0x05,0x14,0x01,0x11,0x00,0x18,0x06,0x13,0x02,0x17,0x00,0x16,0x09,0x10,0x02,0x14,0x06,0x08,0x00,0x20,0x03,0x12,0x04,0x10,0x08,0x05,0x11,0x03,0x15,0x01,0x19,0x09,0x04,0x07,0x01,0x18,0x02,0x15,0x12,0x04,0x13,0x07,0x01,0x16,0x11,0x03,0x04,0x14,0x09,0x08,0x02,0x16,0x06,0x11,0x07,0x12,0x02,0x18,0x04,0x16,0x10,0x08,0x17,0x03,0x05,0x15,0x07,0x13,0x09,0x11,0x04,0x16,0x06,0x12,0x08,0x10,0x14,0x05,0x08,0x12,0x10,0x14,0x06,0x11,0x09,0x07,0x13};
			static const unsigned J[108] = {0x11,0x08,0x19,0x15,0x18,0x16,0x20,0x17,0x21,0x09,0x14,0x04,0x21,0x12,0x18,0x02,0x20,0x13,0x14,0x06,0x16,0x07,0x16,0x10,0x20,0x03,0x21,0x08,0x15,0x04,0x19,0x05,0x21,0x11,0x12,0x07,0x19,0x13,0x15,0x01,0x21,0x09,0x18,0x11,0x17,0x13,0x10,0x16,0x06,0x18,0x02,0x20,0x12,0x14,0x17,0x03,0x20,0x06,0x19,0x17,0x09,0x14,0x08,0x05,0x20,0x18,0x10,0x07,0x17,0x12,0x13,0x05,0x19,0x10,0x15,0x09,0x14,0x03,0x19,0x05,0x17,0x13,0x11,0x18,0x04,0x06,0x16,0x08,0x14,0x10,0x12,0x05,0x17,0x09,0x15,0x11,0x13,0x16,0x07,0x09,0x13,0x11,0x15,0x07,0x12,0x10,0x08,0x14};
			for(size_t k=0;k<108;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 23 items
		template <typename T,typename U> static inline void on23(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[118] = {0x01,0x02,0x05,0x09,0x00,0x15,0x04,0x06,0x10,0x08,0x14,0x03,0x04,0x11,0x02,0x16,0x00,0x13,0x05,0x07,0x01,0x12,0x08,0x17,0x00,0x20,0x01,0x03,0x12,0x09,0x06,0x07,0x18,0x21,0x00,0x08,0x17,0x02,0x09,0x10,0x19,0x00,0x11,0x06,0x15,0x20,0x01,0x05,0x04,0x14,0x03,0x13,0x10,0x04,0x16,0x08,0x07,0x04,0x18,0x09,0x11,0x16,0x12,0x01,0x19,0x02,0x13,0x08,0x05,0x15,0x11,0x01,0x04,0x19,0x05,0x14,0x06,0x13,0x12,0x02,0x18,0x17,0x06,0x14,0x08,0x02,0x03,0x18,0x16,0x07,0x13,0x03,0x05,0x17,0x07,0x09,0x04,0x15,0x10,0x06,0x09,0x05,0x14,0x10,0x08,0x15,0x06,0x11,0x09,0x13,0x07,0x14,0x08,0x12,0x11,0x12,0x10,0x11};
			static const unsigned J[118] = {0x20,0x21,0x13,0x17,0x07,0x22,0x11,0x12,0x16,0x18,0x19,0x08,0x14,0x18,0x06,0x20,0x09,0x22,0x15,0x17,0x10,0x21,0x19,0x22,0x05,0x21,0x02,0x04,0x13,0x10,0x15,0x16,0x19,0x22,0x01,0x11,0x20,0x05,0x12,0x13,0x22,0x03,0x14,0x08,0x18,0x21,0x02,0x17,0x11,0x16,0x09,0x19,0x11,0x07,0x18,0x14,0x15,0x06,0x21,0x10,0x13,0x20,0x14,0x04,0x21,0x06,0x18,0x12,0x07,0x17,0x16,0x03,0x09,0x20,0x08,0x17,0x10,0x16,0x15,0x03,0x20,0x19,0x09,0x15,0x12,0x04,0x05,0x19,0x17,0x09,0x15,0x04,0x06,0x18,0x08,0x10,0x05,0x17,0x14,0x11,0x12,0x07,0x16,0x11,0x09,0x16,0x07,0x13,0x10,0x14,0x08,0x15,0x09,0x14,0x12,0x13,0x11,0x12};
			for(size_t k=0;k<118;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 24 items
		template <typename T,typename U> static inline void on24(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[123] = {0x00,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16,0x18,0x20,0x22,0x01,0x05,0x09,0x00,0x04,0x08,0x13,0x17,0x21,0x12,0x16,0x20,0x01,0x05,0x09,0x13,0x17,0x21,0x00,0x07,0x12,0x19,0x01,0x06,0x13,0x18,0x03,0x04,0x15,0x16,0x05,0x02,0x17,0x14,0x00,0x07,0x12,0x19,0x03,0x15,0x01,0x06,0x13,0x18,0x02,0x08,0x14,0x20,0x00,0x11,0x01,0x07,0x13,0x19,0x03,0x06,0x15,0x18,0x02,0x07,0x14,0x19,0x05,0x17,0x01,0x10,0x03,0x07,0x15,0x19,0x02,0x05,0x06,0x09,0x03,0x04,0x07,0x08,0x02,0x11,0x06,0x09,0x03,0x10,0x04,0x07,0x08,0x11,0x01,0x21,0x05,0x10,0x08,0x11,0x03,0x19,0x09,0x10,0x06,0x15,0x10,0x14,0x07,0x11,0x05,0x17,0x07,0x09,0x11,0x13,0x15};
			static const unsigned J[123] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x17,0x19,0x21,0x23,0x03,0x07,0x11,0x02,0x06,0x10,0x15,0x19,0x23,0x14,0x18,0x22,0x02,0x06,0x10,0x14,0x18,0x22,0x04,0x11,0x16,0x23,0x05,0x10,0x17,0x22,0x07,0x08,0x19,0x20,0x09,0x06,0x21,0x18,0x04,0x11,0x16,0x23,0x08,0x20,0x05,0x10,0x17,0x22,0x03,0x09,0x15,0x21,0x12,0x23,0x04,0x10,0x16,0x22,0x05,0x08,0x17,0x20,0x04,0x09,0x16,0x21,0x06,0x18,0x13,0x22,0x04,0x08,0x16,0x20,0x14,0x17,0x18,0x21,0x15,0x16,0x19,0x20,0x12,0x21,0x14,0x17,0x13,0x20,0x12,0x15,0x16,0x19,0x02,0x22,0x13,0x18,0x12,0x15,0x04,0x20,0x13,0x14,0x08,0x17,0x12,0x16,0x09,0x13,0x06,0x18,0x08,0x10,0x12,0x14,0x16};
			for(size_t k=0;k<123;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 25 items
		template <typename T,typename U> static inline void on25(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[154] = {0x01,0x04,0x07,0x10,0x13,0x16,0x19,0x21,0x23,0x00,0x03,0x06,0x09,0x12,0x15,0x18,0x21,0x22,0x00,0x03,0x02,0x06,0x09,0x08,0x12,0x15,0x14,0x18,0x22,0x20,0x00,0x01,0x06,0x07,0x05,0x12,0x13,0x18,0x19,0x17,0x02,0x01,0x08,0x07,0x00,0x14,0x13,0x18,0x20,0x11,0x02,0x08,0x01,0x04,0x14,0x19,0x20,0x16,0x02,0x01,0x03,0x05,0x20,0x12,0x15,0x17,0x02,0x04,0x12,0x13,0x14,0x16,0x10,0x02,0x05,0x04,0x14,0x13,0x17,0x11,0x03,0x05,0x14,0x16,0x17,0x00,0x09,0x05,0x04,0x14,0x15,0x17,0x00,0x08,0x10,0x05,0x15,0x17,0x01,0x07,0x11,0x16,0x02,0x01,0x06,0x08,0x11,0x17,0x02,0x03,0x07,0x10,0x02,0x04,0x05,0x08,0x11,0x02,0x05,0x04,0x03,0x09,0x05,0x03,0x04,0x10,0x05,0x04,0x11,0x09,0x10,0x05,0x08,0x11,0x10,0x05,0x07,0x11,0x05,0x06,0x08,0x11,0x06,0x08,0x10,0x11,0x07,0x09,0x11,0x08,0x11,0x09,0x10,0x11};
			static const unsigned J[154] = {0x02,0x05,0x08,0x11,0x14,0x17,0x20,0x22,0x24,0x02,0x05,0x08,0x11,0x14,0x17,0x20,0x23,0x24,0x01,0x04,0x05,0x07,0x10,0x11,0x13,0x16,0x17,0x19,0x23,0x24,0x03,0x04,0x09,0x10,0x11,0x15,0x16,0x22,0x23,0x24,0x04,0x03,0x10,0x09,0x06,0x16,0x15,0x21,0x23,0x24,0x03,0x09,0x07,0x10,0x15,0x21,0x22,0x23,0x08,0x06,0x09,0x10,0x21,0x19,0x22,0x23,0x07,0x09,0x18,0x20,0x21,0x22,0x23,0x06,0x09,0x07,0x20,0x18,0x22,0x23,0x06,0x08,0x19,0x20,0x21,0x13,0x22,0x07,0x06,0x18,0x19,0x20,0x12,0x21,0x22,0x06,0x18,0x19,0x14,0x20,0x22,0x18,0x15,0x12,0x19,0x20,0x21,0x18,0x14,0x16,0x19,0x20,0x13,0x17,0x18,0x19,0x20,0x12,0x17,0x16,0x13,0x19,0x16,0x12,0x14,0x19,0x15,0x12,0x19,0x16,0x17,0x14,0x15,0x18,0x16,0x13,0x14,0x17,0x12,0x13,0x14,0x16,0x12,0x13,0x14,0x15,0x12,0x13,0x14,0x12,0x13,0x12,0x12,0x12};
			for(size_t k=0;k<154;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 26 items
		template <typename T,typename U> static inline void on26(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[163] = {0x01,0x04,0x07,0x09,0x11,0x14,0x17,0x20,0x22,0x24,0x00,0x03,0x06,0x09,0x10,0x13,0x16,0x19,0x22,0x23,0x00,0x03,0x02,0x06,0x10,0x08,0x13,0x16,0x15,0x19,0x23,0x21,0x00,0x01,0x06,0x07,0x05,0x13,0x14,0x19,0x20,0x18,0x02,0x01,0x06,0x08,0x15,0x14,0x19,0x21,0x12,0x02,0x07,0x08,0x04,0x15,0x20,0x21,0x17,0x08,0x00,0x03,0x05,0x21,0x13,0x16,0x18,0x00,0x01,0x02,0x04,0x13,0x14,0x15,0x17,0x11,0x02,0x01,0x05,0x15,0x14,0x18,0x00,0x12,0x02,0x04,0x05,0x15,0x17,0x18,0x01,0x10,0x02,0x03,0x05,0x15,0x16,0x18,0x01,0x09,0x12,0x03,0x05,0x16,0x18,0x02,0x08,0x10,0x04,0x17,0x02,0x03,0x07,0x11,0x05,0x18,0x02,0x04,0x08,0x12,0x11,0x05,0x04,0x03,0x06,0x10,0x12,0x05,0x04,0x07,0x12,0x05,0x04,0x08,0x05,0x09,0x05,0x10,0x08,0x09,0x05,0x11,0x07,0x10,0x12,0x06,0x08,0x10,0x11,0x07,0x12,0x11,0x10,0x08,0x12,0x11,0x12,0x09,0x10,0x12,0x11,0x12,0x12};
			static const unsigned J[163] = {0x02,0x05,0x08,0x10,0x12,0x15,0x18,0x21,0x23,0x25,0x02,0x05,0x08,0x11,0x12,0x15,0x18,0x21,0x24,0x25,0x01,0x04,0x05,0x07,0x11,0x12,0x14,0x17,0x18,0x20,0x24,0x25,0x03,0x04,0x10,0x11,0x12,0x16,0x17,0x23,0x24,0x25,0x04,0x03,0x09,0x11,0x17,0x16,0x22,0x24,0x25,0x03,0x09,0x10,0x11,0x16,0x22,0x23,0x24,0x09,0x07,0x10,0x11,0x22,0x20,0x23,0x24,0x06,0x08,0x09,0x10,0x19,0x21,0x22,0x23,0x24,0x08,0x06,0x10,0x21,0x19,0x23,0x13,0x24,0x07,0x08,0x09,0x20,0x21,0x22,0x14,0x23,0x06,0x07,0x08,0x19,0x20,0x21,0x13,0x22,0x23,0x06,0x07,0x19,0x20,0x15,0x21,0x22,0x06,0x19,0x14,0x16,0x20,0x22,0x06,0x19,0x13,0x17,0x20,0x22,0x21,0x18,0x16,0x13,0x19,0x20,0x21,0x17,0x14,0x19,0x20,0x16,0x13,0x19,0x15,0x19,0x14,0x19,0x15,0x16,0x13,0x19,0x14,0x17,0x19,0x13,0x14,0x16,0x18,0x13,0x18,0x16,0x14,0x13,0x17,0x15,0x16,0x13,0x13,0x15,0x13,0x14,0x13};
			for(size_t k=0;k<163;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 27 items
		template <typename T,typename U> static inline void on27(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[173] = {0x01,0x04,0x07,0x09,0x11,0x14,0x16,0x18,0x21,0x23,0x25,0x00,0x03,0x06,0x09,0x10,0x13,0x16,0x17,0x20,0x23,0x24,0x00,0x03,0x02,0x06,0x10,0x08,0x13,0x17,0x15,0x20,0x24,0x22,0x00,0x01,0x06,0x07,0x05,0x13,0x14,0x20,0x21,0x19,0x02,0x01,0x06,0x08,0x13,0x15,0x20,0x22,0x12,0x02,0x07,0x08,0x04,0x14,0x15,0x21,0x22,0x13,0x18,0x08,0x00,0x03,0x05,0x15,0x22,0x14,0x17,0x19,0x00,0x01,0x02,0x04,0x15,0x14,0x16,0x19,0x11,0x02,0x01,0x05,0x15,0x17,0x00,0x12,0x02,0x04,0x05,0x15,0x18,0x17,0x00,0x10,0x02,0x03,0x05,0x19,0x16,0x18,0x01,0x12,0x03,0x05,0x17,0x19,0x02,0x01,0x09,0x04,0x18,0x19,0x02,0x03,0x08,0x10,0x05,0x19,0x02,0x04,0x07,0x11,0x02,0x05,0x04,0x03,0x06,0x08,0x12,0x11,0x05,0x03,0x04,0x07,0x10,0x12,0x05,0x04,0x08,0x12,0x05,0x09,0x05,0x10,0x09,0x05,0x11,0x08,0x10,0x05,0x12,0x07,0x10,0x11,0x06,0x08,0x12,0x11,0x07,0x12,0x10,0x11,0x08,0x12,0x12,0x09,0x10,0x12,0x11,0x12,0x12};
			static const unsigned J[173] = {0x02,0x05,0x08,0x10,0x12,0x15,0x17,0x19,0x22,0x24,0x26,0x02,0x05,0x08,0x11,0x12,0x15,0x18,0x19,0x22,0x25,0x26,0x01,0x04,0x05,0x07,0x11,0x12,0x14,0x18,0x19,0x21,0x25,0x26,0x03,0x04,0x10,0x11,0x12,0x17,0x18,0x24,0x25,0x26,0x04,0x03,0x09,0x11,0x16,0x18,0x23,0x25,0x26,0x03,0x09,0x10,0x11,0x16,0x17,0x23,0x24,0x20,0x25,0x09,0x07,0x10,0x11,0x16,0x23,0x21,0x24,0x25,0x06,0x08,0x09,0x10,0x22,0x20,0x23,0x24,0x25,0x08,0x06,0x10,0x21,0x23,0x14,0x25,0x07,0x08,0x09,0x20,0x23,0x21,0x13,0x24,0x06,0x07,0x08,0x23,0x20,0x22,0x15,0x24,0x06,0x07,0x20,0x22,0x16,0x13,0x23,0x06,0x20,0x21,0x15,0x17,0x22,0x23,0x06,0x20,0x14,0x18,0x21,0x23,0x13,0x19,0x17,0x14,0x20,0x21,0x23,0x22,0x18,0x13,0x15,0x20,0x21,0x22,0x17,0x13,0x20,0x21,0x16,0x20,0x15,0x20,0x16,0x14,0x20,0x15,0x17,0x13,0x20,0x14,0x16,0x18,0x13,0x14,0x19,0x16,0x13,0x18,0x14,0x15,0x13,0x17,0x16,0x13,0x13,0x15,0x13,0x14,0x13};
			for(size_t k=0;k<173;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 28 items
		template <typename T,typename U> static inline void on28(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[179] = {0x01,0x03,0x05,0x08,0x10,0x12,0x15,0x17,0x19,0x22,0x24,0x26,0x00,0x03,0x04,0x07,0x10,0x11,0x14,0x17,0x18,0x21,0x24,0x25,0x00,0x04,0x02,0x07,0x11,0x09,0x14,0x18,0x16,0x21,0x25,0x23,0x00,0x01,0x07,0x08,0x06,0x14,0x15,0x21,0x22,0x20,0x00,0x02,0x07,0x09,0x14,0x16,0x21,0x23,0x13,0x01,0x02,0x08,0x09,0x00,0x05,0x15,0x16,0x22,0x23,0x14,0x19,0x02,0x09,0x01,0x04,0x06,0x16,0x23,0x15,0x18,0x20,0x00,0x02,0x01,0x03,0x06,0x16,0x15,0x17,0x20,0x12,0x02,0x04,0x16,0x18,0x01,0x11,0x13,0x02,0x05,0x04,0x16,0x19,0x18,0x01,0x13,0x06,0x03,0x05,0x20,0x17,0x19,0x02,0x04,0x06,0x18,0x20,0x02,0x03,0x10,0x05,0x06,0x19,0x20,0x02,0x04,0x09,0x11,0x06,0x20,0x04,0x05,0x03,0x08,0x12,0x06,0x05,0x04,0x07,0x09,0x13,0x12,0x06,0x04,0x05,0x08,0x11,0x13,0x06,0x05,0x09,0x13,0x06,0x10,0x06,0x11,0x10,0x06,0x12,0x09,0x11,0x06,0x13,0x08,0x11,0x12,0x07,0x09,0x13,0x12,0x08,0x13,0x11,0x12,0x09,0x13,0x13,0x10,0x11,0x13,0x12,0x13,0x13};
			static const unsigned J[179] = {0x02,0x04,0x06,0x09,0x11,0x13,0x16,0x18,0x20,0x23,0x25,0x27,0x02,0x05,0x06,0x09,0x12,0x13,0x16,0x19,0x20,0x23,0x26,0x27,0x01,0x05,0x06,0x08,0x12,0x13,0x15,0x19,0x20,0x22,0x26,0x27,0x04,0x05,0x11,0x12,0x13,0x18,0x19,0x25,0x26,0x27,0x03,0x05,0x10,0x12,0x17,0x19,0x24,0x26,0x27,0x03,0x04,0x10,0x11,0x07,0x12,0x17,0x18,0x24,0x25,0x21,0x26,0x03,0x10,0x08,0x11,0x12,0x17,0x24,0x22,0x25,0x26,0x14,0x09,0x07,0x10,0x11,0x23,0x21,0x24,0x25,0x26,0x08,0x10,0x22,0x24,0x15,0x25,0x26,0x07,0x10,0x08,0x21,0x24,0x22,0x14,0x25,0x10,0x07,0x09,0x24,0x21,0x23,0x16,0x07,0x09,0x21,0x23,0x15,0x17,0x24,0x07,0x08,0x21,0x22,0x14,0x18,0x23,0x24,0x07,0x21,0x17,0x19,0x14,0x22,0x24,0x20,0x17,0x15,0x21,0x22,0x24,0x23,0x19,0x14,0x16,0x21,0x22,0x23,0x18,0x14,0x21,0x22,0x17,0x21,0x16,0x21,0x17,0x15,0x21,0x16,0x18,0x14,0x21,0x15,0x17,0x19,0x14,0x15,0x20,0x17,0x14,0x19,0x15,0x16,0x14,0x18,0x17,0x14,0x14,0x16,0x14,0x15,0x14};
			for(size_t k=0;k<179;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 29 items
		template <typename T,typename U> static inline void on29(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[191] = {0x01,0x03,0x05,0x08,0x10,0x12,0x15,0x17,0x19,0x21,0x23,0x25,0x27,0x00,0x03,0x04,0x07,0x10,0x11,0x14,0x17,0x18,0x21,0x22,0x25,0x26,0x00,0x04,0x02,0x07,0x11,0x09,0x14,0x18,0x16,0x22,0x26,0x21,0x24,0x00,0x01,0x07,0x08,0x06,0x14,0x15,0x22,0x23,0x20,0x00,0x02,0x07,0x09,0x14,0x16,0x22,0x24,0x13,0x01,0x02,0x08,0x09,0x00,0x05,0x15,0x16,0x23,0x24,0x14,0x19,0x02,0x09,0x01,0x04,0x06,0x16,0x24,0x14,0x15,0x18,0x20,0x02,0x01,0x03,0x06,0x16,0x15,0x17,0x20,0x12,0x02,0x04,0x16,0x18,0x00,0x11,0x13,0x02,0x05,0x04,0x16,0x19,0x00,0x13,0x06,0x03,0x05,0x16,0x20,0x18,0x19,0x04,0x06,0x17,0x20,0x01,0x10,0x05,0x06,0x18,0x20,0x02,0x01,0x09,0x11,0x06,0x19,0x20,0x02,0x03,0x08,0x12,0x20,0x02,0x04,0x07,0x09,0x13,0x12,0x02,0x04,0x05,0x06,0x08,0x11,0x13,0x06,0x05,0x03,0x04,0x09,0x13,0x06,0x04,0x05,0x10,0x06,0x05,0x11,0x06,0x12,0x10,0x11,0x06,0x13,0x09,0x11,0x12,0x06,0x08,0x13,0x12,0x06,0x07,0x09,0x13,0x07,0x09,0x13,0x12,0x08,0x13,0x11,0x09,0x13,0x10,0x13,0x11,0x13,0x12,0x13};
			static const unsigned J[191] = {0x02,0x04,0x06,0x09,0x11,0x13,0x16,0x18,0x20,0x22,0x24,0x26,0x28,0x02,0x05,0x06,0x09,0x12,0x13,0x16,0x19,0x20,0x23,0x24,0x27,0x28,0x01,0x05,0x06,0x08,0x12,0x13,0x15,0x19,0x20,0x23,0x27,0x25,0x28,0x04,0x05,0x11,0x12,0x13,0x18,0x19,0x26,0x27,0x28,0x03,0x05,0x10,0x12,0x17,0x19,0x25,0x27,0x28,0x03,0x04,0x10,0x11,0x07,0x12,0x17,0x18,0x25,0x26,0x22,0x27,0x03,0x10,0x08,0x11,0x12,0x17,0x25,0x21,0x23,0x26,0x27,0x09,0x07,0x10,0x11,0x24,0x21,0x25,0x26,0x27,0x08,0x10,0x23,0x25,0x15,0x26,0x27,0x07,0x10,0x08,0x22,0x25,0x14,0x26,0x10,0x07,0x09,0x21,0x25,0x22,0x23,0x07,0x09,0x21,0x24,0x16,0x25,0x07,0x08,0x21,0x23,0x17,0x14,0x24,0x25,0x07,0x21,0x22,0x16,0x18,0x23,0x25,0x21,0x15,0x19,0x22,0x23,0x25,0x24,0x14,0x18,0x20,0x21,0x22,0x23,0x24,0x20,0x18,0x14,0x15,0x22,0x23,0x19,0x14,0x16,0x22,0x18,0x14,0x22,0x17,0x22,0x18,0x19,0x16,0x22,0x17,0x18,0x20,0x15,0x16,0x21,0x18,0x14,0x15,0x16,0x20,0x14,0x15,0x19,0x16,0x14,0x18,0x15,0x14,0x17,0x14,0x16,0x14,0x15,0x14,0x14};
			for(size_t k=0;k<191;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 30 items
		template <typename T,typename U> static inline void on30(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[198] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x16,0x18,0x20,0x22,0x24,0x26,0x28,0x00,0x03,0x04,0x07,0x08,0x11,0x12,0x15,0x18,0x19,0x22,0x23,0x26,0x27,0x00,0x04,0x02,0x08,0x12,0x07,0x10,0x15,0x19,0x17,0x23,0x27,0x22,0x25,0x00,0x01,0x08,0x09,0x06,0x15,0x16,0x23,0x24,0x21,0x00,0x02,0x08,0x10,0x15,0x17,0x23,0x25,0x14,0x01,0x02,0x09,0x10,0x00,0x05,0x16,0x17,0x24,0x25,0x15,0x20,0x02,0x10,0x00,0x01,0x04,0x06,0x17,0x25,0x15,0x16,0x19,0x21,0x02,0x01,0x03,0x06,0x17,0x16,0x18,0x21,0x00,0x13,0x02,0x04,0x17,0x19,0x01,0x12,0x14,0x02,0x05,0x17,0x20,0x01,0x14,0x02,0x06,0x04,0x05,0x17,0x21,0x19,0x20,0x03,0x06,0x18,0x21,0x02,0x11,0x04,0x06,0x19,0x21,0x02,0x03,0x10,0x12,0x05,0x06,0x20,0x21,0x02,0x04,0x09,0x13,0x06,0x21,0x04,0x05,0x03,0x08,0x10,0x14,0x06,0x05,0x04,0x07,0x10,0x13,0x14,0x06,0x04,0x05,0x08,0x12,0x14,0x06,0x05,0x09,0x14,0x06,0x10,0x06,0x11,0x10,0x06,0x12,0x09,0x11,0x06,0x13,0x08,0x10,0x12,0x14,0x07,0x10,0x12,0x13,0x08,0x14,0x13,0x12,0x09,0x14,0x13,0x10,0x14,0x11,0x14,0x12,0x14,0x13,0x14,0x14};
			static const unsigned J[198] = {0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x17,0x19,0x21,0x23,0x25,0x27,0x29,0x02,0x05,0x06,0x09,0x10,0x13,0x14,0x17,0x20,0x21,0x24,0x25,0x28,0x29,0x01,0x05,0x06,0x09,0x13,0x11,0x14,0x16,0x20,0x21,0x24,0x28,0x26,0x29,0x04,0x05,0x12,0x13,0x14,0x19,0x20,0x27,0x28,0x29,0x03,0x05,0x11,0x13,0x18,0x20,0x26,0x28,0x29,0x03,0x04,0x11,0x12,0x08,0x13,0x18,0x19,0x26,0x27,0x23,0x28,0x03,0x11,0x07,0x09,0x12,0x13,0x18,0x26,0x22,0x24,0x27,0x28,0x10,0x07,0x11,0x12,0x25,0x22,0x26,0x27,0x15,0x28,0x09,0x11,0x24,0x26,0x16,0x27,0x28,0x08,0x11,0x23,0x26,0x15,0x27,0x07,0x11,0x08,0x09,0x22,0x26,0x23,0x24,0x07,0x10,0x22,0x25,0x17,0x26,0x07,0x09,0x22,0x24,0x16,0x18,0x25,0x26,0x07,0x08,0x22,0x23,0x15,0x19,0x24,0x26,0x07,0x22,0x18,0x20,0x15,0x23,0x24,0x26,0x21,0x18,0x16,0x22,0x23,0x24,0x25,0x20,0x15,0x17,0x22,0x23,0x24,0x19,0x15,0x22,0x23,0x18,0x22,0x17,0x22,0x18,0x16,0x22,0x17,0x19,0x15,0x22,0x16,0x17,0x20,0x22,0x15,0x16,0x19,0x21,0x15,0x21,0x19,0x16,0x15,0x20,0x17,0x15,0x19,0x15,0x18,0x15,0x17,0x15,0x16,0x15};
			for(size_t k=0;k<198;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 31 items
		template <typename T,typename U> static inline void on31(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[206] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x17,0x19,0x21,0x23,0x25,0x27,0x29,0x00,0x03,0x04,0x07,0x08,0x11,0x12,0x15,0x16,0x19,0x20,0x23,0x24,0x27,0x28,0x00,0x04,0x02,0x08,0x12,0x07,0x10,0x16,0x20,0x15,0x18,0x24,0x28,0x23,0x26,0x00,0x01,0x08,0x09,0x06,0x16,0x17,0x24,0x25,0x15,0x22,0x00,0x02,0x08,0x10,0x16,0x18,0x24,0x26,0x14,0x01,0x02,0x09,0x10,0x00,0x05,0x17,0x18,0x25,0x26,0x16,0x21,0x02,0x10,0x00,0x01,0x04,0x06,0x18,0x26,0x16,0x17,0x20,0x22,0x02,0x01,0x03,0x06,0x18,0x17,0x19,0x22,0x00,0x13,0x02,0x04,0x18,0x20,0x00,0x01,0x12,0x14,0x02,0x05,0x18,0x21,0x01,0x14,0x02,0x06,0x04,0x05,0x18,0x22,0x20,0x21,0x03,0x06,0x19,0x22,0x02,0x11,0x04,0x06,0x20,0x22,0x02,0x03,0x10,0x12,0x05,0x06,0x21,0x22,0x02,0x04,0x09,0x13,0x06,0x22,0x02,0x04,0x05,0x08,0x10,0x14,0x06,0x05,0x03,0x04,0x07,0x10,0x13,0x14,0x06,0x04,0x05,0x08,0x12,0x14,0x06,0x05,0x09,0x14,0x06,0x10,0x06,0x11,0x06,0x12,0x10,0x11,0x06,0x13,0x09,0x12,0x06,0x14,0x08,0x10,0x12,0x13,0x07,0x10,0x14,0x13,0x08,0x14,0x12,0x13,0x09,0x14,0x10,0x14,0x11,0x14,0x12,0x14,0x13,0x14,0x14};
			static const unsigned J[206] = {0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16,0x18,0x20,0x22,0x24,0x26,0x28,0x30,0x02,0x05,0x06,0x09,0x10,0x13,0x14,0x17,0x18,0x21,0x22,0x25,0x26,0x29,0x30,0x01,0x05,0x06,0x09,0x13,0x11,0x14,0x17,0x21,0x19,0x22,0x25,0x29,0x27,0x30,0x04,0x05,0x12,0x13,0x14,0x20,0x21,0x28,0x29,0x23,0x30,0x03,0x05,0x11,0x13,0x19,0x21,0x27,0x29,0x30,0x03,0x04,0x11,0x12,0x08,0x13,0x19,0x20,0x27,0x28,0x24,0x29,0x03,0x11,0x07,0x09,0x12,0x13,0x19,0x27,0x23,0x25,0x28,0x29,0x10,0x07,0x11,0x12,0x26,0x23,0x27,0x28,0x16,0x29,0x09,0x11,0x25,0x27,0x15,0x17,0x28,0x29,0x08,0x11,0x24,0x27,0x15,0x28,0x07,0x11,0x08,0x09,0x23,0x27,0x24,0x25,0x07,0x10,0x23,0x26,0x18,0x27,0x07,0x09,0x23,0x25,0x17,0x19,0x26,0x27,0x07,0x08,0x23,0x24,0x16,0x20,0x25,0x27,0x07,0x23,0x15,0x19,0x21,0x24,0x25,0x27,0x22,0x19,0x15,0x16,0x23,0x24,0x25,0x26,0x21,0x15,0x17,0x23,0x24,0x25,0x20,0x15,0x23,0x24,0x19,0x23,0x18,0x23,0x17,0x23,0x18,0x19,0x16,0x23,0x17,0x20,0x15,0x23,0x16,0x17,0x19,0x21,0x15,0x16,0x22,0x19,0x15,0x21,0x16,0x17,0x15,0x20,0x15,0x19,0x15,0x18,0x15,0x17,0x15,0x16,0x15};
			for(size_t k=0;k<206;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 32 items
		template <typename T,typename U> static inline void on32(T *a, U *b) {
			assert(a); assert(b);
			static const unsigned I[211] = {0x00,0x02,0x04,0x06,0x08,0x10,0x12,0x14,0x16,0x18,0x20,0x22,0x24,0x26,0x28,0x30,0x00,0x01,0x04,0x05,0x08,0x09,0x12,0x13,0x16,0x17,0x20,0x21,0x24,0x25,0x28,0x29,0x01,0x05,0x00,0x03,0x09,0x13,0x08,0x11,0x17,0x21,0x16,0x19,0x25,0x29,0x24,0x27,0x01,0x02,0x09,0x10,0x00,0x07,0x17,0x18,0x25,0x26,0x16,0x23,0x01,0x03,0x09,0x11,0x17,0x19,0x25,0x27,0x00,0x15,0x02,0x03,0x10,0x11,0x01,0x06,0x18,0x19,0x26,0x27,0x17,0x22,0x03,0x11,0x01,0x02,0x05,0x07,0x19,0x27,0x17,0x18,0x21,0x23,0x03,0x02,0x04,0x07,0x19,0x18,0x20,0x23,0x01,0x14,0x03,0x05,0x19,0x21,0x01,0x02,0x13,0x15,0x03,0x06,0x19,0x22,0x02,0x15,0x03,0x07,0x05,0x06,0x19,0x23,0x21,0x22,0x04,0x07,0x20,0x23,0x03,0x12,0x05,0x07,0x21,0x23,0x03,0x04,0x11,0x13,0x06,0x07,0x22,0x23,0x03,0x05,0x10,0x14,0x07,0x23,0x03,0x05,0x06,0x09,0x11,0x15,0x07,0x06,0x04,0x05,0x08,0x11,0x14,0x15,0x07,0x05,0x06,0x09,0x13,0x15,0x07,0x06,0x10,0x15,0x07,0x11,0x07,0x12,0x07,0x13,0x11,0x12,0x07,0x14,0x10,0x13,0x07,0x15,0x09,0x11,0x13,0x14,0x08,0x11,0x15,0x14,0x09,0x15,0x13,0x14,0x10,0x15,0x11,0x15,0x12,0x15,0x13,0x15,0x14,0x15,0x15};
			static const unsigned J[211] = {0x01,0x03,0x05,0x07,0x09,0x11,0x13,0x15,0x17,0x19,0x21,0x23,0x25,0x27,0x29,0x31,0x02,0x03,0x06,0x07,0x10,0x11,0x14,0x15,0x18,0x19,0x22,0x23,0x26,0x27,0x30,0x31,0x02,0x06,0x04,0x07,0x10,0x14,0x12,0x15,0x18,0x22,0x20,0x23,0x26,0x30,0x28,0x31,0x05,0x06,0x13,0x14,0x08,0x15,0x21,0x22,0x29,0x30,0x24,0x31,0x04,0x06,0x12,0x14,0x20,0x22,0x28,0x30,0x16,0x31,0x04,0x05,0x12,0x13,0x09,0x14,0x20,0x21,0x28,0x29,0x25,0x30,0x04,0x12,0x08,0x10,0x13,0x14,0x20,0x28,0x24,0x26,0x29,0x30,0x11,0x08,0x12,0x13,0x27,0x24,0x28,0x29,0x17,0x30,0x10,0x12,0x26,0x28,0x16,0x18,0x29,0x30,0x09,0x12,0x25,0x28,0x16,0x29,0x08,0x12,0x09,0x10,0x24,0x28,0x25,0x26,0x08,0x11,0x24,0x27,0x19,0x28,0x08,0x10,0x24,0x26,0x18,0x20,0x27,0x28,0x08,0x09,0x24,0x25,0x17,0x21,0x26,0x28,0x08,0x24,0x16,0x20,0x22,0x25,0x26,0x28,0x23,0x20,0x16,0x17,0x24,0x25,0x26,0x27,0x22,0x16,0x18,0x24,0x25,0x26,0x21,0x16,0x24,0x25,0x20,0x24,0x19,0x24,0x18,0x24,0x19,0x20,0x17,0x24,0x18,0x21,0x16,0x24,0x17,0x18,0x20,0x22,0x16,0x17,0x23,0x20,0x16,0x22,0x17,0x18,0x16,0x21,0x16,0x20,0x16,0x19,0x16,0x18,0x16,0x17,0x16};
			for(size_t k=0;k<211;++k) { Y_NWSRT_SWP2(I[k],J[k]); }
		}
		//!built-in version on 0-32 items
		template <typename T, typename U> static inline void on(T *a, U *b, const size_t n) {
			switch(n) {
				case  2: on2(a,b);  break;
				case  3: on3(a,b);  break;
				case  4: on4(a,b);  break;
				case  5: on5(a,b);  break;
				case  6: on6(a,b);  break;
				case  7: on7(a,b);  break;
				case  8: on8(a,b);  break;
				case  9: on9(a,b);  break;
				case 10: on10(a,b); break;
				case 11: on11(a,b); break;
				case 12: on12(a,b); break;
				case 13: on13(a,b); break;
				case 14: on14(a,b); break;
				case 15: on15(a,b); break;
				case 16: on16(a,b); break;
				case 17: on17(a,b); break;
				case 18: on18(a,b); break;
				case 19: on19(a,b); break;
				case 20: on20(a,b); break;
				case 21: on21(a,b); break;
				case 22: on22(a,b); break;
				case 23: on23(a,b); break;
				case 24: on24(a,b); break;
				case 25: on25(a,b); break;
				case 26: on26(a,b); break;
				case 27: on27(a,b); break;
				case 28: on28(a,b); break;
				case 29: on29(a,b); break;
				case 30: on30(a,b); break;
				case 31: on31(a,b); break;
				case 32: on32(a,b); break;
				default: break;
			}
		}
	};
}
#endif
