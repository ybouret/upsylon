#include "hot_to_cold.hpp"

namespace upsylon { namespace Graphic {

 HotToCold:: HotToCold() throw() : Ramp() {}
 HotToCold::~HotToCold() throw() {}
 const rgb * HotToCold:: _256colors() const throw() {
  static const rgb _[256] = {
	rgb(0x00,0x00,0xff), rgb(0x00,0x03,0xff), rgb(0x00,0x07,0xff), rgb(0x00,0x0b,0xff), rgb(0x00,0x0f,0xff), rgb(0x00,0x13,0xff), rgb(0x00,0x17,0xff), rgb(0x00,0x1b,0xff),
	rgb(0x00,0x1f,0xff), rgb(0x00,0x23,0xff), rgb(0x00,0x27,0xff), rgb(0x00,0x2b,0xff), rgb(0x00,0x2f,0xff), rgb(0x00,0x33,0xff), rgb(0x00,0x37,0xff), rgb(0x00,0x3b,0xff),
	rgb(0x00,0x3f,0xff), rgb(0x00,0x43,0xff), rgb(0x00,0x47,0xff), rgb(0x00,0x4b,0xff), rgb(0x00,0x4f,0xff), rgb(0x00,0x53,0xff), rgb(0x00,0x57,0xff), rgb(0x00,0x5b,0xff),
	rgb(0x00,0x5f,0xff), rgb(0x00,0x63,0xff), rgb(0x00,0x67,0xff), rgb(0x00,0x6b,0xff), rgb(0x00,0x6f,0xff), rgb(0x00,0x73,0xff), rgb(0x00,0x77,0xff), rgb(0x00,0x7b,0xff),
	rgb(0x00,0x7f,0xff), rgb(0x00,0x84,0xff), rgb(0x00,0x87,0xff), rgb(0x00,0x8c,0xff), rgb(0x00,0x8f,0xff), rgb(0x00,0x94,0xff), rgb(0x00,0x97,0xff), rgb(0x00,0x9c,0xff),
	rgb(0x00,0x9f,0xff), rgb(0x00,0xa4,0xff), rgb(0x00,0xa7,0xff), rgb(0x00,0xac,0xff), rgb(0x00,0xaf,0xff), rgb(0x00,0xb4,0xff), rgb(0x00,0xb7,0xff), rgb(0x00,0xbc,0xff),
	rgb(0x00,0xbf,0xff), rgb(0x00,0xc4,0xff), rgb(0x00,0xc7,0xff), rgb(0x00,0xcc,0xff), rgb(0x00,0xcf,0xff), rgb(0x00,0xd4,0xff), rgb(0x00,0xd7,0xff), rgb(0x00,0xdc,0xff),
	rgb(0x00,0xdf,0xff), rgb(0x00,0xe4,0xff), rgb(0x00,0xe7,0xff), rgb(0x00,0xec,0xff), rgb(0x00,0xef,0xff), rgb(0x00,0xf4,0xff), rgb(0x00,0xf7,0xff), rgb(0x00,0xfc,0xff),
	rgb(0x00,0xff,0xfe), rgb(0x00,0xff,0xf9), rgb(0x00,0xff,0xf6), rgb(0x00,0xff,0xf1), rgb(0x00,0xff,0xee), rgb(0x00,0xff,0xe9), rgb(0x00,0xff,0xe6), rgb(0x00,0xff,0xe1),
	rgb(0x00,0xff,0xde), rgb(0x00,0xff,0xd9), rgb(0x00,0xff,0xd6), rgb(0x00,0xff,0xd1), rgb(0x00,0xff,0xce), rgb(0x00,0xff,0xc9), rgb(0x00,0xff,0xc6), rgb(0x00,0xff,0xc1),
	rgb(0x00,0xff,0xbe), rgb(0x00,0xff,0xb9), rgb(0x00,0xff,0xb6), rgb(0x00,0xff,0xb1), rgb(0x00,0xff,0xae), rgb(0x00,0xff,0xa9), rgb(0x00,0xff,0xa6), rgb(0x00,0xff,0xa1),
	rgb(0x00,0xff,0x9e), rgb(0x00,0xff,0x99), rgb(0x00,0xff,0x96), rgb(0x00,0xff,0x91), rgb(0x00,0xff,0x8e), rgb(0x00,0xff,0x89), rgb(0x00,0xff,0x86), rgb(0x00,0xff,0x81),
	rgb(0x00,0xff,0x7e), rgb(0x00,0xff,0x7a), rgb(0x00,0xff,0x76), rgb(0x00,0xff,0x72), rgb(0x00,0xff,0x6e), rgb(0x00,0xff,0x6a), rgb(0x00,0xff,0x66), rgb(0x00,0xff,0x62),
	rgb(0x00,0xff,0x5e), rgb(0x00,0xff,0x5a), rgb(0x00,0xff,0x56), rgb(0x00,0xff,0x52), rgb(0x00,0xff,0x4e), rgb(0x00,0xff,0x4a), rgb(0x00,0xff,0x46), rgb(0x00,0xff,0x42),
	rgb(0x00,0xff,0x3d), rgb(0x00,0xff,0x39), rgb(0x00,0xff,0x35), rgb(0x00,0xff,0x31), rgb(0x00,0xff,0x2d), rgb(0x00,0xff,0x29), rgb(0x00,0xff,0x25), rgb(0x00,0xff,0x21),
	rgb(0x00,0xff,0x1d), rgb(0x00,0xff,0x19), rgb(0x00,0xff,0x15), rgb(0x00,0xff,0x11), rgb(0x00,0xff,0x0d), rgb(0x00,0xff,0x09), rgb(0x00,0xff,0x05), rgb(0x00,0xff,0x01),
	rgb(0x01,0xff,0x00), rgb(0x05,0xff,0x00), rgb(0x09,0xff,0x00), rgb(0x0d,0xff,0x00), rgb(0x11,0xff,0x00), rgb(0x15,0xff,0x00), rgb(0x19,0xff,0x00), rgb(0x1d,0xff,0x00),
	rgb(0x21,0xff,0x00), rgb(0x25,0xff,0x00), rgb(0x29,0xff,0x00), rgb(0x2d,0xff,0x00), rgb(0x31,0xff,0x00), rgb(0x35,0xff,0x00), rgb(0x39,0xff,0x00), rgb(0x3d,0xff,0x00),
	rgb(0x42,0xff,0x00), rgb(0x46,0xff,0x00), rgb(0x4a,0xff,0x00), rgb(0x4e,0xff,0x00), rgb(0x52,0xff,0x00), rgb(0x56,0xff,0x00), rgb(0x5a,0xff,0x00), rgb(0x5e,0xff,0x00),
	rgb(0x62,0xff,0x00), rgb(0x66,0xff,0x00), rgb(0x6a,0xff,0x00), rgb(0x6e,0xff,0x00), rgb(0x72,0xff,0x00), rgb(0x76,0xff,0x00), rgb(0x7a,0xff,0x00), rgb(0x7e,0xff,0x00),
	rgb(0x81,0xff,0x00), rgb(0x86,0xff,0x00), rgb(0x89,0xff,0x00), rgb(0x8e,0xff,0x00), rgb(0x91,0xff,0x00), rgb(0x96,0xff,0x00), rgb(0x99,0xff,0x00), rgb(0x9e,0xff,0x00),
	rgb(0xa1,0xff,0x00), rgb(0xa6,0xff,0x00), rgb(0xa9,0xff,0x00), rgb(0xae,0xff,0x00), rgb(0xb1,0xff,0x00), rgb(0xb6,0xff,0x00), rgb(0xb9,0xff,0x00), rgb(0xbe,0xff,0x00),
	rgb(0xc1,0xff,0x00), rgb(0xc6,0xff,0x00), rgb(0xc9,0xff,0x00), rgb(0xce,0xff,0x00), rgb(0xd1,0xff,0x00), rgb(0xd6,0xff,0x00), rgb(0xd9,0xff,0x00), rgb(0xde,0xff,0x00),
	rgb(0xe1,0xff,0x00), rgb(0xe6,0xff,0x00), rgb(0xe9,0xff,0x00), rgb(0xee,0xff,0x00), rgb(0xf1,0xff,0x00), rgb(0xf6,0xff,0x00), rgb(0xf9,0xff,0x00), rgb(0xfe,0xff,0x00),
	rgb(0xff,0xfc,0x00), rgb(0xff,0xf7,0x00), rgb(0xff,0xf4,0x00), rgb(0xff,0xef,0x00), rgb(0xff,0xec,0x00), rgb(0xff,0xe7,0x00), rgb(0xff,0xe4,0x00), rgb(0xff,0xdf,0x00),
	rgb(0xff,0xdc,0x00), rgb(0xff,0xd7,0x00), rgb(0xff,0xd4,0x00), rgb(0xff,0xcf,0x00), rgb(0xff,0xcc,0x00), rgb(0xff,0xc7,0x00), rgb(0xff,0xc4,0x00), rgb(0xff,0xbf,0x00),
	rgb(0xff,0xbc,0x00), rgb(0xff,0xb7,0x00), rgb(0xff,0xb4,0x00), rgb(0xff,0xaf,0x00), rgb(0xff,0xac,0x00), rgb(0xff,0xa7,0x00), rgb(0xff,0xa4,0x00), rgb(0xff,0x9f,0x00),
	rgb(0xff,0x9c,0x00), rgb(0xff,0x97,0x00), rgb(0xff,0x94,0x00), rgb(0xff,0x8f,0x00), rgb(0xff,0x8c,0x00), rgb(0xff,0x87,0x00), rgb(0xff,0x84,0x00), rgb(0xff,0x7f,0x00),
	rgb(0xff,0x7b,0x00), rgb(0xff,0x77,0x00), rgb(0xff,0x73,0x00), rgb(0xff,0x6f,0x00), rgb(0xff,0x6b,0x00), rgb(0xff,0x67,0x00), rgb(0xff,0x63,0x00), rgb(0xff,0x5f,0x00),
	rgb(0xff,0x5b,0x00), rgb(0xff,0x57,0x00), rgb(0xff,0x53,0x00), rgb(0xff,0x4f,0x00), rgb(0xff,0x4b,0x00), rgb(0xff,0x47,0x00), rgb(0xff,0x43,0x00), rgb(0xff,0x3f,0x00),
	rgb(0xff,0x3b,0x00), rgb(0xff,0x37,0x00), rgb(0xff,0x33,0x00), rgb(0xff,0x2f,0x00), rgb(0xff,0x2b,0x00), rgb(0xff,0x27,0x00), rgb(0xff,0x23,0x00), rgb(0xff,0x1f,0x00),
	rgb(0xff,0x1b,0x00), rgb(0xff,0x17,0x00), rgb(0xff,0x13,0x00), rgb(0xff,0x0f,0x00), rgb(0xff,0x0b,0x00), rgb(0xff,0x07,0x00), rgb(0xff,0x03,0x00), rgb(0xff,0x00,0x00)  };
 return _; }
}}
