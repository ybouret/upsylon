#include "hot_to_cold2.hpp"

namespace upsylon { namespace Graphic {

 HotToCold2:: HotToCold2() throw() : Ramp() {}
 HotToCold2::~HotToCold2() throw() {}
 const rgb * HotToCold2:: _256colors() const throw() {
  static const rgb _[256] = {
	rgb(0x00,0x00,0xff), rgb(0x00,0x04,0xff), rgb(0x00,0x09,0xff), rgb(0x00,0x0e,0xff), rgb(0x00,0x13,0xff), rgb(0x00,0x18,0xff), rgb(0x00,0x1d,0xff), rgb(0x00,0x23,0xff),
	rgb(0x00,0x27,0xff), rgb(0x00,0x2d,0xff), rgb(0x00,0x31,0xff), rgb(0x00,0x37,0xff), rgb(0x00,0x3b,0xff), rgb(0x00,0x40,0xff), rgb(0x00,0x46,0xff), rgb(0x00,0x4b,0xff),
	rgb(0x00,0x4f,0xff), rgb(0x00,0x54,0xff), rgb(0x00,0x5a,0xff), rgb(0x00,0x5f,0xff), rgb(0x00,0x63,0xff), rgb(0x00,0x68,0xff), rgb(0x00,0x6e,0xff), rgb(0x00,0x73,0xff),
	rgb(0x00,0x77,0xff), rgb(0x00,0x7c,0xff), rgb(0x00,0x81,0xff), rgb(0x00,0x87,0xff), rgb(0x00,0x8c,0xff), rgb(0x00,0x90,0xff), rgb(0x00,0x96,0xff), rgb(0x00,0x9a,0xff),
	rgb(0x00,0x9f,0xff), rgb(0x00,0xa5,0xff), rgb(0x00,0xa9,0xff), rgb(0x00,0xaf,0xff), rgb(0x00,0xb4,0xff), rgb(0x00,0xb8,0xff), rgb(0x00,0xbe,0xff), rgb(0x00,0xc2,0xff),
	rgb(0x00,0xc7,0xff), rgb(0x00,0xcd,0xff), rgb(0x00,0xd1,0xff), rgb(0x00,0xd7,0xff), rgb(0x00,0xdc,0xff), rgb(0x00,0xe0,0xff), rgb(0x00,0xe6,0xff), rgb(0x00,0xea,0xff),
	rgb(0x00,0xef,0xff), rgb(0x00,0xf5,0xff), rgb(0x00,0xf9,0xff), rgb(0x00,0xff,0xff), rgb(0x00,0xff,0xfa), rgb(0x00,0xff,0xf5), rgb(0x00,0xff,0xf0), rgb(0x00,0xff,0xeb),
	rgb(0x00,0xff,0xe6), rgb(0x00,0xff,0xe1), rgb(0x00,0xff,0xdc), rgb(0x00,0xff,0xd7), rgb(0x00,0xff,0xd2), rgb(0x00,0xff,0xcd), rgb(0x00,0xff,0xc8), rgb(0x00,0xff,0xc3),
	rgb(0x00,0xff,0xbe), rgb(0x00,0xff,0xb9), rgb(0x00,0xff,0xb4), rgb(0x00,0xff,0xaf), rgb(0x00,0xff,0xaa), rgb(0x00,0xff,0xa5), rgb(0x00,0xff,0xa0), rgb(0x00,0xff,0x9b),
	rgb(0x00,0xff,0x96), rgb(0x00,0xff,0x91), rgb(0x00,0xff,0x8c), rgb(0x00,0xff,0x87), rgb(0x00,0xff,0x82), rgb(0x00,0xff,0x7d), rgb(0x00,0xff,0x78), rgb(0x00,0xff,0x73),
	rgb(0x00,0xff,0x6e), rgb(0x00,0xff,0x69), rgb(0x00,0xff,0x64), rgb(0x00,0xff,0x5f), rgb(0x00,0xff,0x5a), rgb(0x00,0xff,0x55), rgb(0x00,0xff,0x50), rgb(0x00,0xff,0x4b),
	rgb(0x00,0xff,0x46), rgb(0x00,0xff,0x41), rgb(0x00,0xff,0x3c), rgb(0x00,0xff,0x37), rgb(0x00,0xff,0x32), rgb(0x00,0xff,0x2d), rgb(0x00,0xff,0x28), rgb(0x00,0xff,0x23),
	rgb(0x00,0xff,0x1e), rgb(0x00,0xff,0x19), rgb(0x00,0xff,0x14), rgb(0x00,0xff,0x0f), rgb(0x00,0xff,0x0a), rgb(0x00,0xff,0x05), rgb(0x00,0xff,0x00), rgb(0x04,0xff,0x00),
	rgb(0x09,0xff,0x00), rgb(0x0e,0xff,0x00), rgb(0x13,0xff,0x00), rgb(0x18,0xff,0x00), rgb(0x1d,0xff,0x00), rgb(0x22,0xff,0x00), rgb(0x27,0xff,0x00), rgb(0x2c,0xff,0x00),
	rgb(0x31,0xff,0x00), rgb(0x36,0xff,0x00), rgb(0x3b,0xff,0x00), rgb(0x40,0xff,0x00), rgb(0x45,0xff,0x00), rgb(0x4a,0xff,0x00), rgb(0x4f,0xff,0x00), rgb(0x54,0xff,0x00),
	rgb(0x59,0xff,0x00), rgb(0x5e,0xff,0x00), rgb(0x63,0xff,0x00), rgb(0x68,0xff,0x00), rgb(0x6d,0xff,0x00), rgb(0x72,0xff,0x00), rgb(0x77,0xff,0x00), rgb(0x7c,0xff,0x00),
	rgb(0x81,0xff,0x00), rgb(0x86,0xff,0x00), rgb(0x8b,0xff,0x00), rgb(0x90,0xff,0x00), rgb(0x95,0xff,0x00), rgb(0x9a,0xff,0x00), rgb(0x9f,0xff,0x00), rgb(0xa4,0xff,0x00),
	rgb(0xa9,0xff,0x00), rgb(0xae,0xff,0x00), rgb(0xb3,0xff,0x00), rgb(0xb8,0xff,0x00), rgb(0xbd,0xff,0x00), rgb(0xc2,0xff,0x00), rgb(0xc7,0xff,0x00), rgb(0xcc,0xff,0x00),
	rgb(0xd1,0xff,0x00), rgb(0xd6,0xff,0x00), rgb(0xdb,0xff,0x00), rgb(0xe0,0xff,0x00), rgb(0xe5,0xff,0x00), rgb(0xea,0xff,0x00), rgb(0xef,0xff,0x00), rgb(0xf4,0xff,0x00),
	rgb(0xf9,0xff,0x00), rgb(0xff,0xfe,0x00), rgb(0xff,0xf9,0x00), rgb(0xff,0xf4,0x00), rgb(0xff,0xef,0x00), rgb(0xff,0xea,0x00), rgb(0xff,0xe5,0x00), rgb(0xff,0xe0,0x00),
	rgb(0xff,0xdb,0x00), rgb(0xff,0xd6,0x00), rgb(0xff,0xd1,0x00), rgb(0xff,0xcc,0x00), rgb(0xff,0xc7,0x00), rgb(0xff,0xc2,0x00), rgb(0xff,0xbd,0x00), rgb(0xff,0xb8,0x00),
	rgb(0xff,0xb3,0x00), rgb(0xff,0xae,0x00), rgb(0xff,0xa9,0x00), rgb(0xff,0xa4,0x00), rgb(0xff,0x9f,0x00), rgb(0xff,0x9a,0x00), rgb(0xff,0x95,0x00), rgb(0xff,0x90,0x00),
	rgb(0xff,0x8b,0x00), rgb(0xff,0x86,0x00), rgb(0xff,0x81,0x00), rgb(0xff,0x7c,0x00), rgb(0xff,0x77,0x00), rgb(0xff,0x72,0x00), rgb(0xff,0x6d,0x00), rgb(0xff,0x68,0x00),
	rgb(0xff,0x63,0x00), rgb(0xff,0x5e,0x00), rgb(0xff,0x59,0x00), rgb(0xff,0x54,0x00), rgb(0xff,0x4f,0x00), rgb(0xff,0x4a,0x00), rgb(0xff,0x45,0x00), rgb(0xff,0x40,0x00),
	rgb(0xff,0x3b,0x00), rgb(0xff,0x36,0x00), rgb(0xff,0x31,0x00), rgb(0xff,0x2c,0x00), rgb(0xff,0x27,0x00), rgb(0xff,0x22,0x00), rgb(0xff,0x1d,0x00), rgb(0xff,0x18,0x00),
	rgb(0xff,0x13,0x00), rgb(0xff,0x0e,0x00), rgb(0xff,0x09,0x00), rgb(0xff,0x04,0x00), rgb(0xff,0x00,0x00), rgb(0xff,0x04,0x04), rgb(0xff,0x09,0x09), rgb(0xff,0x0e,0x0e),
	rgb(0xff,0x13,0x13), rgb(0xff,0x18,0x18), rgb(0xff,0x1d,0x1d), rgb(0xff,0x22,0x22), rgb(0xff,0x27,0x27), rgb(0xff,0x2c,0x2c), rgb(0xff,0x31,0x31), rgb(0xff,0x36,0x36),
	rgb(0xff,0x3b,0x3b), rgb(0xff,0x40,0x40), rgb(0xff,0x45,0x45), rgb(0xff,0x4a,0x4a), rgb(0xff,0x4f,0x4f), rgb(0xff,0x54,0x54), rgb(0xff,0x59,0x59), rgb(0xff,0x5e,0x5e),
	rgb(0xff,0x63,0x63), rgb(0xff,0x68,0x68), rgb(0xff,0x6d,0x6d), rgb(0xff,0x72,0x72), rgb(0xff,0x77,0x77), rgb(0xff,0x7c,0x7c), rgb(0xff,0x81,0x81), rgb(0xff,0x86,0x86),
	rgb(0xff,0x8b,0x8b), rgb(0xff,0x90,0x90), rgb(0xff,0x95,0x95), rgb(0xff,0x9a,0x9a), rgb(0xff,0x9f,0x9f), rgb(0xff,0xa4,0xa4), rgb(0xff,0xa9,0xa9), rgb(0xff,0xae,0xae),
	rgb(0xff,0xb3,0xb3), rgb(0xff,0xb8,0xb8), rgb(0xff,0xbd,0xbd), rgb(0xff,0xc2,0xc2), rgb(0xff,0xc7,0xc7), rgb(0xff,0xcc,0xcc), rgb(0xff,0xd1,0xd1), rgb(0xff,0xd6,0xd6),
	rgb(0xff,0xdb,0xdb), rgb(0xff,0xe0,0xe0), rgb(0xff,0xe5,0xe5), rgb(0xff,0xea,0xea), rgb(0xff,0xef,0xef), rgb(0xff,0xf4,0xf4), rgb(0xff,0xf9,0xf9), rgb(0xff,0xfe,0xfe)  };
 return _; }
}}
